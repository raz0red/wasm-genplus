/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./src/main/js/audio/index.js":
/*!************************************!*\
  !*** ./src/main/js/audio/index.js ***!
  \************************************/
/*! exports provided: ScriptAudioProcessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scriptprocessor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scriptprocessor.js */ \"./src/main/js/audio/scriptprocessor.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ScriptAudioProcessor\", function() { return _scriptprocessor_js__WEBPACK_IMPORTED_MODULE_0__[\"ScriptAudioProcessor\"]; });\n\n\n\n//# sourceURL=webpack:///./src/main/js/audio/index.js?");

/***/ }),

/***/ "./src/main/js/audio/scriptprocessor.js":
/*!**********************************************!*\
  !*** ./src/main/js/audio/scriptprocessor.js ***!
  \**********************************************/
/*! exports provided: ScriptAudioProcessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScriptAudioProcessor\", function() { return ScriptAudioProcessor; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ScriptAudioProcessor = /*#__PURE__*/function () {\n  function ScriptAudioProcessor() {\n    var channelCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    var frequency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 48000;\n    var bufferSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16384;\n    var scriptBufferSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 512;\n\n    _classCallCheck(this, ScriptAudioProcessor);\n\n    this.frequency = frequency;\n    this.bufferSize = bufferSize;\n    this.scriptBufferSize = scriptBufferSize;\n    this.channelCount = channelCount;\n    this.paused = true;\n    this.audioCtx = null;\n    this.audioNode = null;\n    this.mixhead = 0;\n    this.mixtail = 0;\n    this.tmpBuffers = new Array(channelCount);\n    this.mixbuffer = new Array(channelCount);\n\n    for (var i = 0; i < channelCount; i++) {\n      this.mixbuffer[i] = new Array(bufferSize);\n    }\n  }\n\n  _createClass(ScriptAudioProcessor, [{\n    key: \"getFrequency\",\n    value: function getFrequency() {\n      return this.frequency;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(p) {\n      if (p == this.paused) return;\n\n      if (!p) {\n        this.audioCtx.resume();\n      } else {\n        this.audioCtx.suspend();\n      }\n\n      this.paused = p;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      if (!this.audioCtx && (window.AudioContext || window.webkitAudioContext)) {\n        this.audioCtx = window.AudioContext ? new window.AudioContext({\n          sampleRate: this.frequency\n        }) : new window.webkitAudioContext();\n\n        if (this.audioCtx.sampleRate) {\n          this.frequency = this.audioCtx.sampleRate;\n        }\n\n        this.audioNode = this.audioCtx.createScriptProcessor(this.scriptBufferSize, 0, this.channelCount);\n\n        this.audioNode.onaudioprocess = function (e) {\n          for (var i = 0; i < _this.channelCount; i++) {\n            _this.tmpBuffers[i] = e.outputBuffer.getChannelData(i);\n          }\n\n          var done = 0;\n          var len = _this.tmpBuffers[0].length;\n\n          while (_this.mixtail != _this.mixhead && done < len) {\n            for (var _i = 0; _i < _this.channelCount; _i++) {\n              _this.tmpBuffers[_i][done] = _this.mixbuffer[_i][_this.mixtail];\n            }\n\n            done++;\n            _this.mixtail++;\n\n            if (_this.mixtail == _this.bufferSize) {\n              _this.mixtail = 0;\n            }\n          }\n\n          while (done < len) {\n            for (var _i2 = 0; _i2 < _this.channelCount; _i2++) {\n              _this.tmpBuffers[_i2] = 0;\n            }\n\n            done++;\n          }\n        };\n\n        this.audioNode.connect(this.audioCtx.destination);\n        this.paused = false; // Audio resume\n\n        var resumeFunc = function resumeFunc() {\n          _this.audioCtx.resume();\n\n          if (_this.audioCtx.state !== 'running') {\n            _this.audioCtx.resume();\n          }\n        };\n\n        var docElement = document.documentElement;\n        docElement.addEventListener(\"keydown\", resumeFunc);\n        docElement.addEventListener(\"click\", resumeFunc);\n        docElement.addEventListener(\"drop\", resumeFunc);\n        docElement.addEventListener(\"dragdrop\", resumeFunc);\n      }\n    }\n  }, {\n    key: \"storeSound\",\n    value: function storeSound(channels, length) {\n      for (var i = 0; i < length; i++) {\n        for (var j = 0; j < channels.length; j++) {\n          this.mixbuffer[j][this.mixhead] = channels[j][i];\n        }\n\n        this.mixhead++;\n        if (this.mixhead == this.bufferSize) this.mixhead = 0;\n      }\n    }\n  }]);\n\n  return ScriptAudioProcessor;\n}();\n\n//# sourceURL=webpack:///./src/main/js/audio/scriptprocessor.js?");

/***/ }),

/***/ "./src/main/js/display/index.js":
/*!**************************************!*\
  !*** ./src/main/js/display/index.js ***!
  \**************************************/
/*! exports provided: DisplayLoop, VisibilityChangeMonitor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _loop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loop.js */ \"./src/main/js/display/loop.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DisplayLoop\", function() { return _loop_js__WEBPACK_IMPORTED_MODULE_0__[\"DisplayLoop\"]; });\n\n/* harmony import */ var _visibilitymonitor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visibilitymonitor.js */ \"./src/main/js/display/visibilitymonitor.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VisibilityChangeMonitor\", function() { return _visibilitymonitor_js__WEBPACK_IMPORTED_MODULE_1__[\"VisibilityChangeMonitor\"]; });\n\n\n\n\n//# sourceURL=webpack:///./src/main/js/display/index.js?");

/***/ }),

/***/ "./src/main/js/display/loop.js":
/*!*************************************!*\
  !*** ./src/main/js/display/loop.js ***!
  \*************************************/
/*! exports provided: DisplayLoop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DisplayLoop\", function() { return DisplayLoop; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DisplayLoop = /*#__PURE__*/function () {\n  function DisplayLoop() {\n    var freq = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;\n    var vsync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, DisplayLoop);\n\n    this.frequency = freq;\n    this.forceAdjustTimestamp = false;\n    this.vsync = vsync;\n    this.debug = false;\n    this.paused = true;\n  }\n\n  _createClass(DisplayLoop, [{\n    key: \"setDebug\",\n    value: function setDebug(debug) {\n      this.debug = debug;\n    }\n  }, {\n    key: \"getFrequency\",\n    value: function getFrequency() {\n      return this.frequency;\n    }\n  }, {\n    key: \"sync\",\n    value: function sync(cb, afterTimeout) {\n      if (this.vsync) {\n        requestAnimationFrame(cb);\n      } else {\n        if (!afterTimeout) {\n          setTimeout(cb, 0);\n        } else {\n          cb();\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(p) {\n      if (p == this.paused) return;\n\n      if (!p) {\n        this.forceAdjustTimestamp = true;\n      }\n\n      this.paused = p;\n    }\n  }, {\n    key: \"start\",\n    value: function start(cb) {\n      var _this = this;\n\n      var frequency = this.frequency;\n      var frameTicks = 1000.0 / frequency;\n      var adjustTolerance = frameTicks * frequency * 2; // 2 secs\n\n      var debugFrequency = frequency * 10;\n      console.log(\"Frame ticks: \" + frameTicks);\n      console.log(\"Frequency: \" + frequency);\n      var start = Date.now();\n      var fc = 0;\n      var avgWait = 0;\n\n      var f = function f() {\n        if (!_this.paused) {\n          cb();\n          nextTimestamp += frameTicks;\n          var now = Date.now();\n\n          if (nextTimestamp + adjustTolerance < now || _this.forceAdjustTimestamp) {\n            _this.forceAdjustTimestamp = false;\n            nextTimestamp = now;\n            fc = 0;\n            start = now;\n            avgWait = 0;\n            console.log(\"adjusted next timestamp.\");\n          }\n\n          var wait = nextTimestamp - now;\n          avgWait += wait;\n\n          if (wait > 0) {\n            setTimeout(function () {\n              return _this.sync(f, true);\n            }, wait);\n          } else {\n            _this.sync(f, false);\n          }\n\n          fc++;\n\n          if (fc % debugFrequency == 0) {\n            var elapsed = Date.now() - start;\n\n            if (_this.debug) {\n              console.log(\"v:%s, vsync: %d\", (1000.0 / (elapsed / fc)).toFixed(2), _this.vsync ? 1 : 0, _this.vsync ? \"\" : \"wait: \" + (avgWait / fc * frequency).toFixed(2) + \", \");\n            }\n\n            start = Date.now();\n            fc = 0;\n            avgWait = 0;\n          }\n        } else {\n          _this.sync(f, false);\n        }\n      };\n\n      var nextTimestamp = Date.now() + frameTicks;\n      this.pause(false);\n      setTimeout(function () {\n        return _this.sync(f, true);\n      }, nextTimestamp);\n    }\n  }]);\n\n  return DisplayLoop;\n}();\n\n//# sourceURL=webpack:///./src/main/js/display/loop.js?");

/***/ }),

/***/ "./src/main/js/display/visibilitymonitor.js":
/*!**************************************************!*\
  !*** ./src/main/js/display/visibilitymonitor.js ***!
  \**************************************************/
/*! exports provided: VisibilityChangeMonitor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VisibilityChangeMonitor\", function() { return VisibilityChangeMonitor; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VisibilityChangeMonitor = function VisibilityChangeMonitor(cb) {\n  var _this = this;\n\n  _classCallCheck(this, VisibilityChangeMonitor);\n\n  this.cb = cb;\n  this.hidden = null;\n  this.visibilityChange = null;\n\n  var handleVisibilityChange = function handleVisibilityChange() {\n    _this.cb(document[_this.hidden]);\n  };\n\n  if (typeof document.hidden !== \"undefined\") {\n    // Opera 12.10 and Firefox 18 and later support\n    this.hidden = \"hidden\";\n    this.visibilityChange = \"visibilitychange\";\n  } else if (typeof document.msHidden !== \"undefined\") {\n    this.hidden = \"msHidden\";\n    this.visibilityChange = \"msvisibilitychange\";\n  } else if (typeof document.webkitHidden !== \"undefined\") {\n    this.hidden = \"webkitHidden\";\n    this.visibilityChange = \"webkitvisibilitychange\";\n  }\n\n  document.addEventListener(this.visibilityChange, handleVisibilityChange, false);\n};\n\n//# sourceURL=webpack:///./src/main/js/display/visibilitymonitor.js?");

/***/ }),

/***/ "./src/main/js/genplus.js":
/*!********************************!*\
  !*** ./src/main/js/genplus.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__filename, process, __dirname, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar Module = function () {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n\n  if (true) _scriptDir = _scriptDir || __filename;\n  return function (Module) {\n    Module = Module || {};\n    var Module = typeof Module !== \"undefined\" ? Module : {};\n    var readyPromiseResolve, readyPromiseReject;\n    Module[\"ready\"] = new Promise(function (resolve, reject) {\n      readyPromiseResolve = resolve;\n      readyPromiseReject = reject;\n    });\n    var moduleOverrides = {};\n    var key;\n\n    for (key in Module) {\n      if (Module.hasOwnProperty(key)) {\n        moduleOverrides[key] = Module[key];\n      }\n    }\n\n    var arguments_ = [];\n    var thisProgram = \"./this.program\";\n\n    var quit_ = function quit_(status, toThrow) {\n      throw toThrow;\n    };\n\n    var ENVIRONMENT_IS_WEB = false;\n    var ENVIRONMENT_IS_WORKER = false;\n    var ENVIRONMENT_IS_NODE = false;\n    var ENVIRONMENT_IS_SHELL = false;\n    ENVIRONMENT_IS_WEB = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\";\n    ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n    ENVIRONMENT_IS_NODE = (typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" && _typeof(process.versions) === \"object\" && typeof process.versions.node === \"string\";\n    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n    var scriptDirectory = \"\";\n\n    function locateFile(path) {\n      if (Module[\"locateFile\"]) {\n        return Module[\"locateFile\"](path, scriptDirectory);\n      }\n\n      return scriptDirectory + path;\n    }\n\n    var read_, readAsync, readBinary, setWindowTitle;\n    var nodeFS;\n    var nodePath;\n\n    if (ENVIRONMENT_IS_NODE) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\").dirname(scriptDirectory) + \"/\";\n      } else {\n        scriptDirectory = __dirname + \"/\";\n      }\n\n      read_ = function shell_read(filename, binary) {\n        if (!nodeFS) nodeFS = __webpack_require__(/*! fs */ \"fs\");\n        if (!nodePath) nodePath = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n        filename = nodePath[\"normalize\"](filename);\n        return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n      };\n\n      readBinary = function readBinary(filename) {\n        var ret = read_(filename, true);\n\n        if (!ret.buffer) {\n          ret = new Uint8Array(ret);\n        }\n\n        assert(ret.buffer);\n        return ret;\n      };\n\n      if (process[\"argv\"].length > 1) {\n        thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n      }\n\n      arguments_ = process[\"argv\"].slice(2);\n      process[\"on\"](\"uncaughtException\", function (ex) {\n        if (!(ex instanceof ExitStatus)) {\n          throw ex;\n        }\n      });\n      process[\"on\"](\"unhandledRejection\", abort);\n\n      quit_ = function quit_(status) {\n        process[\"exit\"](status);\n      };\n\n      Module[\"inspect\"] = function () {\n        return \"[Emscripten Module object]\";\n      };\n    } else if (ENVIRONMENT_IS_SHELL) {\n      if (typeof read != \"undefined\") {\n        read_ = function shell_read(f) {\n          return read(f);\n        };\n      }\n\n      readBinary = function readBinary(f) {\n        var data;\n\n        if (typeof readbuffer === \"function\") {\n          return new Uint8Array(readbuffer(f));\n        }\n\n        data = read(f, \"binary\");\n        assert(_typeof(data) === \"object\");\n        return data;\n      };\n\n      if (typeof scriptArgs != \"undefined\") {\n        arguments_ = scriptArgs;\n      } else if (typeof arguments != \"undefined\") {\n        arguments_ = arguments;\n      }\n\n      if (typeof quit === \"function\") {\n        quit_ = function quit_(status) {\n          quit(status);\n        };\n      }\n\n      if (typeof print !== \"undefined\") {\n        if (typeof console === \"undefined\") console = {};\n        console.log = print;\n        console.warn = console.error = typeof printErr !== \"undefined\" ? printErr : print;\n      }\n    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = self.location.href;\n      } else if (document.currentScript) {\n        scriptDirectory = document.currentScript.src;\n      }\n\n      if (_scriptDir) {\n        scriptDirectory = _scriptDir;\n      }\n\n      if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n      } else {\n        scriptDirectory = \"\";\n      }\n\n      {\n        read_ = function shell_read(url) {\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"GET\", url, false);\n          xhr.send(null);\n          return xhr.responseText;\n        };\n\n        if (ENVIRONMENT_IS_WORKER) {\n          readBinary = function readBinary(url) {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url, false);\n            xhr.responseType = \"arraybuffer\";\n            xhr.send(null);\n            return new Uint8Array(xhr.response);\n          };\n        }\n\n        readAsync = function readAsync(url, onload, onerror) {\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"GET\", url, true);\n          xhr.responseType = \"arraybuffer\";\n\n          xhr.onload = function xhr_onload() {\n            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n              onload(xhr.response);\n              return;\n            }\n\n            onerror();\n          };\n\n          xhr.onerror = onerror;\n          xhr.send(null);\n        };\n      }\n\n      setWindowTitle = function setWindowTitle(title) {\n        document.title = title;\n      };\n    } else {}\n\n    var out = Module[\"print\"] || console.log.bind(console);\n    var err = Module[\"printErr\"] || console.warn.bind(console);\n\n    for (key in moduleOverrides) {\n      if (moduleOverrides.hasOwnProperty(key)) {\n        Module[key] = moduleOverrides[key];\n      }\n    }\n\n    moduleOverrides = null;\n    if (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n    if (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n    if (Module[\"quit\"]) quit_ = Module[\"quit\"];\n    var tempRet0 = 0;\n\n    var setTempRet0 = function setTempRet0(value) {\n      tempRet0 = value;\n    };\n\n    var getTempRet0 = function getTempRet0() {\n      return tempRet0;\n    };\n\n    var wasmBinary;\n    if (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n    var noExitRuntime;\n    if (Module[\"noExitRuntime\"]) noExitRuntime = Module[\"noExitRuntime\"];\n\n    if ((typeof WebAssembly === \"undefined\" ? \"undefined\" : _typeof(WebAssembly)) !== \"object\") {\n      abort(\"no native wasm support detected\");\n    }\n\n    var wasmMemory;\n    var wasmTable;\n    var ABORT = false;\n    var EXITSTATUS = 0;\n\n    function assert(condition, text) {\n      if (!condition) {\n        abort(\"Assertion failed: \" + text);\n      }\n    }\n\n    var UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\n    function UTF8ArrayToString(heap, idx, maxBytesToRead) {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n\n      while (heap[endPtr] && !(endPtr >= endIdx)) {\n        ++endPtr;\n      }\n\n      if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n        return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n      } else {\n        var str = \"\";\n\n        while (idx < endPtr) {\n          var u0 = heap[idx++];\n\n          if (!(u0 & 128)) {\n            str += String.fromCharCode(u0);\n            continue;\n          }\n\n          var u1 = heap[idx++] & 63;\n\n          if ((u0 & 224) == 192) {\n            str += String.fromCharCode((u0 & 31) << 6 | u1);\n            continue;\n          }\n\n          var u2 = heap[idx++] & 63;\n\n          if ((u0 & 240) == 224) {\n            u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n          } else {\n            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n          }\n\n          if (u0 < 65536) {\n            str += String.fromCharCode(u0);\n          } else {\n            var ch = u0 - 65536;\n            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n          }\n        }\n      }\n\n      return str;\n    }\n\n    function UTF8ToString(ptr, maxBytesToRead) {\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n    }\n\n    var WASM_PAGE_SIZE = 65536;\n\n    function alignUp(x, multiple) {\n      if (x % multiple > 0) {\n        x += multiple - x % multiple;\n      }\n\n      return x;\n    }\n\n    var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\n    function updateGlobalBufferAndViews(buf) {\n      buffer = buf;\n      Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n      Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n      Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n      Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n      Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n      Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n      Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n      Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n    }\n\n    var INITIAL_INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 33554432;\n\n    if (Module[\"wasmMemory\"]) {\n      wasmMemory = Module[\"wasmMemory\"];\n    } else {\n      wasmMemory = new WebAssembly.Memory({\n        \"initial\": INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE,\n        \"maximum\": 2147483648 / WASM_PAGE_SIZE\n      });\n    }\n\n    if (wasmMemory) {\n      buffer = wasmMemory.buffer;\n    }\n\n    INITIAL_INITIAL_MEMORY = buffer.byteLength;\n    updateGlobalBufferAndViews(buffer);\n    var __ATPRERUN__ = [];\n    var __ATINIT__ = [];\n    var __ATMAIN__ = [];\n    var __ATPOSTRUN__ = [];\n    var runtimeInitialized = false;\n\n    function preRun() {\n      if (Module[\"preRun\"]) {\n        if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [Module[\"preRun\"]];\n\n        while (Module[\"preRun\"].length) {\n          addOnPreRun(Module[\"preRun\"].shift());\n        }\n      }\n\n      callRuntimeCallbacks(__ATPRERUN__);\n    }\n\n    function initRuntime() {\n      runtimeInitialized = true;\n      callRuntimeCallbacks(__ATINIT__);\n    }\n\n    function preMain() {\n      callRuntimeCallbacks(__ATMAIN__);\n    }\n\n    function postRun() {\n      if (Module[\"postRun\"]) {\n        if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [Module[\"postRun\"]];\n\n        while (Module[\"postRun\"].length) {\n          addOnPostRun(Module[\"postRun\"].shift());\n        }\n      }\n\n      callRuntimeCallbacks(__ATPOSTRUN__);\n    }\n\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb);\n    }\n\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb);\n    }\n\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null;\n\n    function addRunDependency(id) {\n      runDependencies++;\n\n      if (Module[\"monitorRunDependencies\"]) {\n        Module[\"monitorRunDependencies\"](runDependencies);\n      }\n    }\n\n    function removeRunDependency(id) {\n      runDependencies--;\n\n      if (Module[\"monitorRunDependencies\"]) {\n        Module[\"monitorRunDependencies\"](runDependencies);\n      }\n\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n        }\n\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled;\n          dependenciesFulfilled = null;\n          callback();\n        }\n      }\n    }\n\n    Module[\"preloadedImages\"] = {};\n    Module[\"preloadedAudios\"] = {};\n\n    function abort(what) {\n      if (Module[\"onAbort\"]) {\n        Module[\"onAbort\"](what);\n      }\n\n      what += \"\";\n      err(what);\n      ABORT = true;\n      EXITSTATUS = 1;\n      what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n      var e = new WebAssembly.RuntimeError(what);\n      readyPromiseReject(e);\n      throw e;\n    }\n\n    function hasPrefix(str, prefix) {\n      return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;\n    }\n\n    var dataURIPrefix = \"data:application/octet-stream;base64,\";\n\n    function isDataURI(filename) {\n      return hasPrefix(filename, dataURIPrefix);\n    }\n\n    var fileURIPrefix = \"file://\";\n\n    function isFileURI(filename) {\n      return hasPrefix(filename, fileURIPrefix);\n    }\n\n    var wasmBinaryFile = \"genplus.wasm\";\n\n    if (!isDataURI(wasmBinaryFile)) {\n      wasmBinaryFile = locateFile(wasmBinaryFile);\n    }\n\n    function getBinary() {\n      try {\n        if (wasmBinary) {\n          return new Uint8Array(wasmBinary);\n        }\n\n        if (readBinary) {\n          return readBinary(wasmBinaryFile);\n        } else {\n          throw \"both async and sync fetching of the wasm failed\";\n        }\n      } catch (err) {\n        abort(err);\n      }\n    }\n\n    function getBinaryPromise() {\n      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === \"function\" && !isFileURI(wasmBinaryFile)) {\n        return fetch(wasmBinaryFile, {\n          credentials: \"same-origin\"\n        }).then(function (response) {\n          if (!response[\"ok\"]) {\n            throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n          }\n\n          return response[\"arrayBuffer\"]();\n        })[\"catch\"](function () {\n          return getBinary();\n        });\n      }\n\n      return Promise.resolve().then(getBinary);\n    }\n\n    function createWasm() {\n      var info = {\n        \"a\": asmLibraryArg\n      };\n\n      function receiveInstance(instance, module) {\n        var exports = instance.exports;\n        Module[\"asm\"] = exports;\n        wasmTable = Module[\"asm\"][\"p\"];\n        removeRunDependency(\"wasm-instantiate\");\n      }\n\n      addRunDependency(\"wasm-instantiate\");\n\n      function receiveInstantiatedSource(output) {\n        receiveInstance(output[\"instance\"]);\n      }\n\n      function instantiateArrayBuffer(receiver) {\n        return getBinaryPromise().then(function (binary) {\n          return WebAssembly.instantiate(binary, info);\n        }).then(receiver, function (reason) {\n          err(\"failed to asynchronously prepare wasm: \" + reason);\n          abort(reason);\n        });\n      }\n\n      function instantiateAsync() {\n        if (!wasmBinary && typeof WebAssembly.instantiateStreaming === \"function\" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === \"function\") {\n          fetch(wasmBinaryFile, {\n            credentials: \"same-origin\"\n          }).then(function (response) {\n            var result = WebAssembly.instantiateStreaming(response, info);\n            return result.then(receiveInstantiatedSource, function (reason) {\n              err(\"wasm streaming compile failed: \" + reason);\n              err(\"falling back to ArrayBuffer instantiation\");\n              return instantiateArrayBuffer(receiveInstantiatedSource);\n            });\n          });\n        } else {\n          return instantiateArrayBuffer(receiveInstantiatedSource);\n        }\n      }\n\n      if (Module[\"instantiateWasm\"]) {\n        try {\n          var exports = Module[\"instantiateWasm\"](info, receiveInstance);\n          return exports;\n        } catch (e) {\n          err(\"Module.instantiateWasm callback failed with error: \" + e);\n          return false;\n        }\n      }\n\n      instantiateAsync();\n      return {};\n    }\n\n    function SetCanvasSize(w, h) {\n      window.setCanvasSize(w, h);\n    }\n\n    function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        var callback = callbacks.shift();\n\n        if (typeof callback == \"function\") {\n          callback(Module);\n          continue;\n        }\n\n        var func = callback.func;\n\n        if (typeof func === \"number\") {\n          if (callback.arg === undefined) {\n            wasmTable.get(func)();\n          } else {\n            wasmTable.get(func)(callback.arg);\n          }\n        } else {\n          func(callback.arg === undefined ? null : callback.arg);\n        }\n      }\n    }\n\n    var PATH = {\n      splitPath: function splitPath(filename) {\n        var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },\n      normalizeArray: function normalizeArray(parts, allowAboveRoot) {\n        var up = 0;\n\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n\n          if (last === \".\") {\n            parts.splice(i, 1);\n          } else if (last === \"..\") {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift(\"..\");\n          }\n        }\n\n        return parts;\n      },\n      normalize: function normalize(path) {\n        var isAbsolute = path.charAt(0) === \"/\",\n            trailingSlash = path.substr(-1) === \"/\";\n        path = PATH.normalizeArray(path.split(\"/\").filter(function (p) {\n          return !!p;\n        }), !isAbsolute).join(\"/\");\n\n        if (!path && !isAbsolute) {\n          path = \".\";\n        }\n\n        if (path && trailingSlash) {\n          path += \"/\";\n        }\n\n        return (isAbsolute ? \"/\" : \"\") + path;\n      },\n      dirname: function dirname(path) {\n        var result = PATH.splitPath(path),\n            root = result[0],\n            dir = result[1];\n\n        if (!root && !dir) {\n          return \".\";\n        }\n\n        if (dir) {\n          dir = dir.substr(0, dir.length - 1);\n        }\n\n        return root + dir;\n      },\n      basename: function basename(path) {\n        if (path === \"/\") return \"/\";\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, \"\");\n        var lastSlash = path.lastIndexOf(\"/\");\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash + 1);\n      },\n      extname: function extname(path) {\n        return PATH.splitPath(path)[3];\n      },\n      join: function join() {\n        var paths = Array.prototype.slice.call(arguments, 0);\n        return PATH.normalize(paths.join(\"/\"));\n      },\n      join2: function join2(l, r) {\n        return PATH.normalize(l + \"/\" + r);\n      }\n    };\n    var SYSCALLS = {\n      mappings: {},\n      buffers: [null, [], []],\n      printChar: function printChar(stream, curr) {\n        var buffer = SYSCALLS.buffers[stream];\n\n        if (curr === 0 || curr === 10) {\n          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n          buffer.length = 0;\n        } else {\n          buffer.push(curr);\n        }\n      },\n      varargs: undefined,\n      get: function get() {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n        return ret;\n      },\n      getStr: function getStr(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },\n      get64: function get64(low, high) {\n        return low;\n      }\n    };\n\n    function ___sys_fcntl64(fd, cmd, varargs) {\n      SYSCALLS.varargs = varargs;\n      return 0;\n    }\n\n    function ___sys_ioctl(fd, op, varargs) {\n      SYSCALLS.varargs = varargs;\n      return 0;\n    }\n\n    function ___sys_open(path, flags, varargs) {\n      SYSCALLS.varargs = varargs;\n    }\n\n    function _longjmp(env, value) {\n      _setThrew(env, value || 1);\n\n      throw \"longjmp\";\n    }\n\n    function _emscripten_longjmp(a0, a1) {\n      return _longjmp(a0, a1);\n    }\n\n    function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.copyWithin(dest, src, src + num);\n    }\n\n    function _emscripten_get_heap_size() {\n      return HEAPU8.length;\n    }\n\n    function emscripten_realloc_buffer(size) {\n      try {\n        wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        return 1;\n      } catch (e) {}\n    }\n\n    function _emscripten_resize_heap(requestedSize) {\n      requestedSize = requestedSize >>> 0;\n\n      var oldSize = _emscripten_get_heap_size();\n\n      var maxHeapSize = 2147483648;\n\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n\n      var minHeapSize = 16777216;\n\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), 65536));\n        var replacement = emscripten_realloc_buffer(newSize);\n\n        if (replacement) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function _fd_close(fd) {\n      return 0;\n    }\n\n    function _fd_read(fd, iov, iovcnt, pnum) {\n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = SYSCALLS.doReadv(stream, iov, iovcnt);\n      HEAP32[pnum >> 2] = num;\n      return 0;\n    }\n\n    function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}\n\n    function _fd_write(fd, iov, iovcnt, pnum) {\n      var num = 0;\n\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAP32[iov + i * 8 >> 2];\n        var len = HEAP32[iov + (i * 8 + 4) >> 2];\n\n        for (var j = 0; j < len; j++) {\n          SYSCALLS.printChar(fd, HEAPU8[ptr + j]);\n        }\n\n        num += len;\n      }\n\n      HEAP32[pnum >> 2] = num;\n      return 0;\n    }\n\n    function _getTempRet0() {\n      return getTempRet0() | 0;\n    }\n\n    function _setTempRet0($i) {\n      setTempRet0($i | 0);\n    }\n\n    __ATINIT__.push({\n      func: function func() {\n        ___wasm_call_ctors();\n      }\n    });\n\n    var asmLibraryArg = {\n      \"l\": SetCanvasSize,\n      \"g\": ___sys_fcntl64,\n      \"j\": ___sys_ioctl,\n      \"k\": ___sys_open,\n      \"c\": _emscripten_longjmp,\n      \"n\": _emscripten_memcpy_big,\n      \"o\": _emscripten_resize_heap,\n      \"f\": _fd_close,\n      \"i\": _fd_read,\n      \"m\": _fd_seek,\n      \"h\": _fd_write,\n      \"d\": _getTempRet0,\n      \"e\": invoke_v,\n      \"a\": wasmMemory,\n      \"b\": _setTempRet0\n    };\n    var asm = createWasm();\n\n    var ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function () {\n      return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"q\"]).apply(null, arguments);\n    };\n\n    var _wasm_input_update = Module[\"_wasm_input_update\"] = function () {\n      return (_wasm_input_update = Module[\"_wasm_input_update\"] = Module[\"asm\"][\"r\"]).apply(null, arguments);\n    };\n\n    var _init = Module[\"_init\"] = function () {\n      return (_init = Module[\"_init\"] = Module[\"asm\"][\"s\"]).apply(null, arguments);\n    };\n\n    var _init_genplus = Module[\"_init_genplus\"] = function () {\n      return (_init_genplus = Module[\"_init_genplus\"] = Module[\"asm\"][\"t\"]).apply(null, arguments);\n    };\n\n    var _reset = Module[\"_reset\"] = function () {\n      return (_reset = Module[\"_reset\"] = Module[\"asm\"][\"u\"]).apply(null, arguments);\n    };\n\n    var _is_pal = Module[\"_is_pal\"] = function () {\n      return (_is_pal = Module[\"_is_pal\"] = Module[\"asm\"][\"v\"]).apply(null, arguments);\n    };\n\n    var ___em_js__SetCanvasSize = Module[\"___em_js__SetCanvasSize\"] = function () {\n      return (___em_js__SetCanvasSize = Module[\"___em_js__SetCanvasSize\"] = Module[\"asm\"][\"w\"]).apply(null, arguments);\n    };\n\n    var _tick = Module[\"_tick\"] = function () {\n      return (_tick = Module[\"_tick\"] = Module[\"asm\"][\"x\"]).apply(null, arguments);\n    };\n\n    var _sound = Module[\"_sound\"] = function () {\n      return (_sound = Module[\"_sound\"] = Module[\"asm\"][\"y\"]).apply(null, arguments);\n    };\n\n    var _get_rom_buffer_ref = Module[\"_get_rom_buffer_ref\"] = function () {\n      return (_get_rom_buffer_ref = Module[\"_get_rom_buffer_ref\"] = Module[\"asm\"][\"z\"]).apply(null, arguments);\n    };\n\n    var _get_frame_buffer_ref = Module[\"_get_frame_buffer_ref\"] = function () {\n      return (_get_frame_buffer_ref = Module[\"_get_frame_buffer_ref\"] = Module[\"asm\"][\"A\"]).apply(null, arguments);\n    };\n\n    var _get_web_audio_l_ref = Module[\"_get_web_audio_l_ref\"] = function () {\n      return (_get_web_audio_l_ref = Module[\"_get_web_audio_l_ref\"] = Module[\"asm\"][\"B\"]).apply(null, arguments);\n    };\n\n    var _get_web_audio_r_ref = Module[\"_get_web_audio_r_ref\"] = function () {\n      return (_get_web_audio_r_ref = Module[\"_get_web_audio_r_ref\"] = Module[\"asm\"][\"C\"]).apply(null, arguments);\n    };\n\n    var _get_input_buffer_ref = Module[\"_get_input_buffer_ref\"] = function () {\n      return (_get_input_buffer_ref = Module[\"_get_input_buffer_ref\"] = Module[\"asm\"][\"D\"]).apply(null, arguments);\n    };\n\n    var stackSave = Module[\"stackSave\"] = function () {\n      return (stackSave = Module[\"stackSave\"] = Module[\"asm\"][\"E\"]).apply(null, arguments);\n    };\n\n    var stackRestore = Module[\"stackRestore\"] = function () {\n      return (stackRestore = Module[\"stackRestore\"] = Module[\"asm\"][\"F\"]).apply(null, arguments);\n    };\n\n    var _setThrew = Module[\"_setThrew\"] = function () {\n      return (_setThrew = Module[\"_setThrew\"] = Module[\"asm\"][\"G\"]).apply(null, arguments);\n    };\n\n    function invoke_v(index) {\n      var sp = stackSave();\n\n      try {\n        wasmTable.get(index)();\n      } catch (e) {\n        stackRestore(sp);\n        if (e !== e + 0 && e !== \"longjmp\") throw e;\n\n        _setThrew(1, 0);\n      }\n    }\n\n    var calledRun;\n\n    function ExitStatus(status) {\n      this.name = \"ExitStatus\";\n      this.message = \"Program terminated with exit(\" + status + \")\";\n      this.status = status;\n    }\n\n    dependenciesFulfilled = function runCaller() {\n      if (!calledRun) run();\n      if (!calledRun) dependenciesFulfilled = runCaller;\n    };\n\n    function run(args) {\n      args = args || arguments_;\n\n      if (runDependencies > 0) {\n        return;\n      }\n\n      preRun();\n      if (runDependencies > 0) return;\n\n      function doRun() {\n        if (calledRun) return;\n        calledRun = true;\n        Module[\"calledRun\"] = true;\n        if (ABORT) return;\n        initRuntime();\n        preMain();\n        readyPromiseResolve(Module);\n        if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n        postRun();\n      }\n\n      if (Module[\"setStatus\"]) {\n        Module[\"setStatus\"](\"Running...\");\n        setTimeout(function () {\n          setTimeout(function () {\n            Module[\"setStatus\"](\"\");\n          }, 1);\n          doRun();\n        }, 1);\n      } else {\n        doRun();\n      }\n    }\n\n    Module[\"run\"] = run;\n\n    if (Module[\"preInit\"]) {\n      if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [Module[\"preInit\"]];\n\n      while (Module[\"preInit\"].length > 0) {\n        Module[\"preInit\"].pop()();\n      }\n    }\n\n    noExitRuntime = true;\n    run();\n    return Module.ready;\n  };\n}();\n\nif (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = Module;else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return Module;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n/* WEBPACK VAR INJECTION */}.call(this, \"/index.js\", __webpack_require__(/*! ./../../../node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), \"/\", __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./src/main/js/genplus.js?");

/***/ }),

/***/ "./src/main/js/genplus.wasm":
/*!**********************************!*\
  !*** ./src/main/js/genplus.wasm ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"genplus.wasm\");\n\n//# sourceURL=webpack:///./src/main/js/genplus.wasm?");

/***/ }),

/***/ "./src/main/js/index.js":
/*!******************************!*\
  !*** ./src/main/js/index.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _genplus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./genplus.js */ \"./src/main/js/genplus.js\");\n/* harmony import */ var _genplus_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_genplus_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _genplus_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./genplus.wasm */ \"./src/main/js/genplus.wasm\");\n/* harmony import */ var _zip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./zip */ \"./src/main/js/zip/index.js\");\n/* harmony import */ var _display__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./display */ \"./src/main/js/display/index.js\");\n/* harmony import */ var _audio__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./audio */ \"./src/main/js/audio/index.js\");\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./input */ \"./src/main/js/input/index.js\");\n\n\n\n\n\n\nvar controllers = new _input__WEBPACK_IMPORTED_MODULE_5__[\"Controllers\"]([new _input__WEBPACK_IMPORTED_MODULE_5__[\"Controller\"](new _input__WEBPACK_IMPORTED_MODULE_5__[\"DefaultKeyCodeToControlMapping\"]()), new _input__WEBPACK_IMPORTED_MODULE_5__[\"Controller\"]()]);\nvar ROM_PATH = './roms/sonic.bin';\n\n(function () {\n  var CONTROLS = {\n    INPUT_MODE: 0x0800,\n    INPUT_X: 0x0400,\n    INPUT_Y: 0x0200,\n    INPUT_Z: 0x0100,\n    INPUT_START: 0x0080,\n    INPUT_A: 0x0040,\n    INPUT_C: 0x0020,\n    INPUT_B: 0x0010,\n    INPUT_RIGHT: 0x0008,\n    INPUT_LEFT: 0x0004,\n    INPUT_DOWN: 0x0002,\n    INPUT_UP: 0x0001\n  };\n  var CANVAS_WIDTH = 320;\n  var CANVAS_HEIGHT_NTSC = 224;\n  var CANVAS_HEIGHT_PAL = 240;\n  var GAMEPAD_API_INDEX = 32; // emulator\n\n  var gens;\n  var romdata;\n  var vram;\n  var input; // canvas member\n\n  var canvas;\n  var canvasContext;\n  var canvasImageData; // audio member\n\n  var audioChannels = new Array(2);\n  var audioProcessor = null; // display\n\n  var displayLoop = null;\n  var visibilityMonitor = null;\n\n  var pollControls = function pollControls() {\n    controllers.poll();\n\n    for (var i = 0; i < 2; i++) {\n      input[i] = 0;\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].UP)) {\n        input[i] |= CONTROLS.INPUT_UP;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].DOWN)) {\n        input[i] |= CONTROLS.INPUT_DOWN;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].RIGHT)) {\n        input[i] |= CONTROLS.INPUT_RIGHT;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].LEFT)) {\n        input[i] |= CONTROLS.INPUT_LEFT;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].X)) {\n        input[i] |= CONTROLS.INPUT_A;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].A)) {\n        input[i] |= CONTROLS.INPUT_B;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].B)) {\n        input[i] |= CONTROLS.INPUT_C;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].LBUMP)) {\n        input[i] |= CONTROLS.INPUT_X;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].Y)) {\n        input[i] |= CONTROLS.INPUT_Y;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].RBUMP)) {\n        input[i] |= CONTROLS.INPUT_Z;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].SELECT)) {\n        input[i] |= CONTROLS.INPUT_MODE;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].START)) {\n        input[i] |= CONTROLS.INPUT_START;\n      }\n\n      if (controllers.isControlDown(i, _input__WEBPACK_IMPORTED_MODULE_5__[\"CIDS\"].ESCAPE)) {\n        window.history.back();\n      }\n    }\n  };\n\n  var start = function start(module) {\n    // Prepare canvas\n    canvas = document.getElementById('screen');\n\n    window.setCanvasSize = function (w, h) {\n      console.log(\"width: \".concat(w, \", height: \").concat(h));\n      canvas.setAttribute('width', w);\n      canvas.setAttribute('height', h);\n    }; // init emuulator\n\n\n    gens._init_genplus();\n\n    var pal = gens._is_pal();\n\n    canvas.setAttribute('width', CANVAS_WIDTH);\n    canvas.setAttribute('height', pal ? CANVAS_HEIGHT_PAL : CANVAS_HEIGHT_NTSC);\n    canvasContext = canvas.getContext('2d');\n    canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n    canvasImageData = canvasContext.createImageData(canvas.width, canvas.height); // Create loop and audio processor\n\n    audioProcessor = new _audio__WEBPACK_IMPORTED_MODULE_4__[\"ScriptAudioProcessor\"]();\n    displayLoop = new _display__WEBPACK_IMPORTED_MODULE_3__[\"DisplayLoop\"](pal ? 50 : 60);\n    visibilityMonitor = new _display__WEBPACK_IMPORTED_MODULE_3__[\"VisibilityChangeMonitor\"](function (p) {\n      displayLoop.pause(p);\n      audioProcessor.pause(p);\n    }); // reset the emulator\n\n    gens._reset(); // vram view\n\n\n    vram = new Uint8ClampedArray(gens.HEAPU8.buffer, gens._get_frame_buffer_ref(), canvas.width * canvas.height * 4); // audio view\n\n    var SAMPLING_PER_FPS = audioProcessor.getFrequency() / displayLoop.getFrequency() + 100;\n    audioChannels[0] = new Float32Array(gens.HEAPF32.buffer, gens._get_web_audio_l_ref(), SAMPLING_PER_FPS);\n    audioChannels[1] = new Float32Array(gens.HEAPF32.buffer, gens._get_web_audio_r_ref(), SAMPLING_PER_FPS); // input\n\n    input = new Uint16Array(gens.HEAPU16.buffer, gens._get_input_buffer_ref(), GAMEPAD_API_INDEX); // audio\n\n    audioProcessor.start(); // game loop\n\n    displayLoop.start(function () {\n      // update\n      gens._tick(); // update controls\n\n\n      pollControls(); // draw\n\n      canvasImageData.data.set(vram);\n      canvasContext.putImageData(canvasImageData, 0, 0); // sound\n\n      var samples = gens._sound();\n\n      audioProcessor.storeSound(audioChannels, samples);\n    }); //displayLoop.setDebug(true);\n  };\n\n  var fetchData = function fetchData(url) {\n    return new Promise(function (resolve, reject) {\n      fetch(url).then(function (response) {\n        return response.blob();\n      }).then(function (blob) {\n        return resolve(blob);\n      })[\"catch\"](function () {\n        var purl = \"http://192.168.1.179/?y=\".concat(url);\n        fetch(purl).then(function (response) {\n          return response.blob();\n        }).then(function (blob) {\n          return resolve(blob);\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    });\n  };\n\n  _genplus_js__WEBPACK_IMPORTED_MODULE_0___default()().then(function (module) {\n    gens = module; // memory allocate\n\n    gens._init(); // load rom\n\n\n    fetchData(ROM_PATH).then(function (blob) {\n      return _zip__WEBPACK_IMPORTED_MODULE_2__[\"Unzip\"].unzip(blob, [\".md\", \".bin\", \".gen\", \".smd\"]);\n    }).then(function (blob) {\n      return new Response(blob).arrayBuffer();\n    }).then(function (bytes) {\n      // create buffer from wasm\n      romdata = new Uint8Array(gens.HEAPU8.buffer, gens._get_rom_buffer_ref(bytes.byteLength), bytes.byteLength);\n      romdata.set(new Uint8Array(bytes)); // start\n\n      start(module);\n    })[\"catch\"](function (error) {\n      return console.error(error);\n    });\n  });\n})();\n\n//# sourceURL=webpack:///./src/main/js/index.js?");

/***/ }),

/***/ "./src/main/js/input/controls.js":
/*!***************************************!*\
  !*** ./src/main/js/input/controls.js ***!
  \***************************************/
/*! exports provided: CIDS, KCODES, PadMapping, StandardPadMapping, KeyCodeToControlMapping, DefaultKeyCodeToControlMapping, Controller, Controllers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CIDS\", function() { return CIDS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KCODES\", function() { return KCODES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PadMapping\", function() { return PadMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StandardPadMapping\", function() { return StandardPadMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KeyCodeToControlMapping\", function() { return KeyCodeToControlMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultKeyCodeToControlMapping\", function() { return DefaultKeyCodeToControlMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Controller\", function() { return Controller; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Controllers\", function() { return Controllers; });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CIDS = {\n  UP: 0,\n  DOWN: 1,\n  LEFT: 2,\n  RIGHT: 3,\n  A: 4,\n  B: 5,\n  X: 6,\n  Y: 7,\n  LBUMP: 8,\n  RBUMP: 9,\n  LTRIG: 10,\n  RTRIG: 11,\n  SELECT: 12,\n  START: 13,\n  LANALOG: 14,\n  RANALOG: 15,\n  ESCAPE: 16\n};\nvar KCODES = {\n  ARROW_UP: 'ArrowUp',\n  ARROW_DOWN: 'ArrowDown',\n  ARROW_LEFT: 'ArrowLeft',\n  ARROW_RIGHT: 'ArrowRight',\n  Z: 'KeyZ',\n  A: 'KeyA',\n  X: 'KeyX',\n  S: 'KeyS',\n  Q: 'KeyQ',\n  W: 'KeyW',\n  SHIFT_RIGHT: 'ShiftRight',\n  ENTER: 'Enter',\n  ESCAPE: 'Escape'\n};\nvar PadMapping = /*#__PURE__*/function () {\n  function PadMapping(idToButtonNum) {\n    var axisMappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, PadMapping);\n\n    this.idToButtonNum = idToButtonNum;\n    this.buttonNumToId = {};\n\n    for (var _i = 0, _Object$entries = Object.entries(idToButtonNum); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          id = _Object$entries$_i[0],\n          num = _Object$entries$_i[1];\n\n      this.buttonNumToId[num] = id;\n    }\n  }\n\n  _createClass(PadMapping, [{\n    key: \"getButtonNum\",\n    value: function getButtonNum(cid) {\n      var bid = this.idToButtonNum[cid];\n      return bid === undefined ? -1 : bid;\n    }\n  }, {\n    key: \"getAxisIndex\",\n    value: function getAxisIndex(stick, isX) {\n      return -1;\n    }\n  }, {\n    key: \"getAxisValue\",\n    value: function getAxisValue(pad, stick, isX) {\n      if (pad && pad.axes) {\n        var idx = this.getAxisIndex(stick, isX);\n\n        if (idx >= 0 && idx < pad.axes.length) {\n          return pad.axes[idx];\n        }\n      }\n\n      return 0;\n    }\n  }]);\n\n  return PadMapping;\n}();\nvar StandardPadMapping = /*#__PURE__*/function (_PadMapping) {\n  _inherits(StandardPadMapping, _PadMapping);\n\n  var _super = _createSuper(StandardPadMapping);\n\n  function StandardPadMapping() {\n    var _super$call;\n\n    _classCallCheck(this, StandardPadMapping);\n\n    return _super.call(this, (_super$call = {}, _defineProperty(_super$call, CIDS.UP, 12), _defineProperty(_super$call, CIDS.DOWN, 13), _defineProperty(_super$call, CIDS.LEFT, 14), _defineProperty(_super$call, CIDS.RIGHT, 15), _defineProperty(_super$call, CIDS.A, 0), _defineProperty(_super$call, CIDS.B, 1), _defineProperty(_super$call, CIDS.X, 2), _defineProperty(_super$call, CIDS.Y, 3), _defineProperty(_super$call, CIDS.LBUMP, 4), _defineProperty(_super$call, CIDS.RBUMP, 5), _defineProperty(_super$call, CIDS.LTRIG, 6), _defineProperty(_super$call, CIDS.RTRIG, 7), _defineProperty(_super$call, CIDS.SELECT, 8), _defineProperty(_super$call, CIDS.START, 9), _defineProperty(_super$call, CIDS.LANALOG, 10), _defineProperty(_super$call, CIDS.RANALOG, 11), _super$call));\n  }\n\n  _createClass(StandardPadMapping, [{\n    key: \"getAxisIndex\",\n    value: function getAxisIndex(stick, isX) {\n      if (stick === 0) return isX ? 0 : 1;else if (stick === 1) {\n        return isX ? 3 : 4;\n      } else {\n        return -1;\n      }\n    }\n  }]);\n\n  return StandardPadMapping;\n}(PadMapping);\nvar KeyCodeToControlMapping = /*#__PURE__*/function () {\n  function KeyCodeToControlMapping() {\n    var keyCodeToControlId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, KeyCodeToControlMapping);\n\n    this.keyCodeToControlId = keyCodeToControlId;\n    this.controlIdState = {};\n\n    for (var _i2 = 0, _Object$entries2 = Object.entries(keyCodeToControlId); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n          code = _Object$entries2$_i[0],\n          id = _Object$entries2$_i[1];\n\n      this.controlIdState[id] = false;\n      this.leftLast = false;\n      this.upLast = false;\n      this.upHeld = false;\n      this.downHeld = false;\n      this.rightHeld = false;\n      this.leftHeld = false;\n    }\n  }\n\n  _createClass(KeyCodeToControlMapping, [{\n    key: \"handleKeyEvent\",\n    value: function handleKeyEvent(e, down) {\n      var cid = this.keyCodeToControlId[e.code];\n\n      if (cid !== undefined) {\n        this.controlIdState[cid] = down;\n\n        switch (cid) {\n          case CIDS.UP:\n            this.upHeld = down;\n            if (down) this.upLast = true;\n            break;\n\n          case CIDS.DOWN:\n            this.downHeld = down;\n            if (down) this.upLast = false;\n            break;\n\n          case CIDS.RIGHT:\n            this.rightHeld = down;\n            if (down) this.leftLast = false;\n            break;\n\n          case CIDS.LEFT:\n            this.leftHeld = down;\n            if (down) this.leftLast = true;\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"isControlDown\",\n    value: function isControlDown(cid) {\n      var down = this.controlIdState[cid];\n\n      if (down !== undefined && down) {\n        switch (cid) {\n          case CIDS.UP:\n            down = !(this.downHeld && !this.upLast);\n            break;\n\n          case CIDS.DOWN:\n            down = !(this.upHeld && this.upLast);\n            break;\n\n          case CIDS.RIGHT:\n            down = !(this.leftHeld && this.leftLast);\n            break;\n\n          case CIDS.LEFT:\n            down = !(this.rightHeld && !this.leftLast);\n            break;\n        }\n      } else {\n        down = false;\n      }\n\n      return down;\n    }\n  }]);\n\n  return KeyCodeToControlMapping;\n}();\nvar DefaultKeyCodeToControlMapping = /*#__PURE__*/function (_KeyCodeToControlMapp) {\n  _inherits(DefaultKeyCodeToControlMapping, _KeyCodeToControlMapp);\n\n  var _super2 = _createSuper(DefaultKeyCodeToControlMapping);\n\n  function DefaultKeyCodeToControlMapping() {\n    var _super2$call;\n\n    _classCallCheck(this, DefaultKeyCodeToControlMapping);\n\n    return _super2.call(this, (_super2$call = {}, _defineProperty(_super2$call, KCODES.ARROW_UP, CIDS.UP), _defineProperty(_super2$call, KCODES.ARROW_DOWN, CIDS.DOWN), _defineProperty(_super2$call, KCODES.ARROW_RIGHT, CIDS.RIGHT), _defineProperty(_super2$call, KCODES.ARROW_LEFT, CIDS.LEFT), _defineProperty(_super2$call, KCODES.Z, CIDS.A), _defineProperty(_super2$call, KCODES.A, CIDS.X), _defineProperty(_super2$call, KCODES.X, CIDS.B), _defineProperty(_super2$call, KCODES.S, CIDS.Y), _defineProperty(_super2$call, KCODES.Q, CIDS.LBUMP), _defineProperty(_super2$call, KCODES.W, CIDS.RBUMP), _defineProperty(_super2$call, KCODES.SHIFT_RIGHT, CIDS.SELECT), _defineProperty(_super2$call, KCODES.ENTER, CIDS.START), _defineProperty(_super2$call, KCODES.ESCAPE, CIDS.ESCAPE), _super2$call));\n  }\n\n  return DefaultKeyCodeToControlMapping;\n}(KeyCodeToControlMapping);\nvar Controller = /*#__PURE__*/function () {\n  function Controller() {\n    var keyCodeToControlMapping = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new KeyCodeToControlMapping();\n\n    _classCallCheck(this, Controller);\n\n    this.keyCodeToControlMapping = keyCodeToControlMapping;\n    this.padMapping = new StandardPadMapping();\n    this.pad = null;\n    this.isXbox = navigator.userAgent.toLowerCase().includes(\"xbox\");\n  }\n\n  _createClass(Controller, [{\n    key: \"setPad\",\n    value: function setPad(pad) {\n      this.pad = pad;\n    }\n  }, {\n    key: \"handleKeyEvent\",\n    value: function handleKeyEvent(e, down) {\n      this.keyCodeToControlMapping.handleKeyEvent(e, down);\n    }\n  }, {\n    key: \"isPadButtonDown\",\n    value: function isPadButtonDown(cid) {\n      var padMapping = this.padMapping;\n      var pad = this.pad;\n      var bid = padMapping.getButtonNum(cid);\n      var bdown = false;\n\n      if (bid >= 0 && pad && pad.buttons.length > bid) {\n        bdown = pad.buttons[bid].pressed;\n      }\n\n      if (!bdown) {\n        switch (cid) {\n          case CIDS.LEFT:\n            bdown = padMapping.getAxisValue(this.pad, 0, true) < -0.5;\n            break;\n\n          case CIDS.RIGHT:\n            bdown = padMapping.getAxisValue(this.pad, 0, true) > 0.5;\n            break;\n\n          case CIDS.UP:\n            bdown = padMapping.getAxisValue(this.pad, 0, false) < -0.5;\n            break;\n\n          case CIDS.DOWN:\n            bdown = padMapping.getAxisValue(this.pad, 0, false) > 0.5;\n            break;\n        }\n      }\n\n      return bdown;\n    }\n  }, {\n    key: \"isControlDown\",\n    value: function isControlDown(cid) {\n      if (this.keyCodeToControlMapping.isControlDown(cid)) {\n        return true;\n      }\n\n      if (cid === CIDS.ESCAPE || this.isXbox && (cid === CIDS.START || cid == CIDS.SELECT)) {\n        if (this.isPadButtonDown(CIDS.LTRIG) || this.isPadButtonDown(CIDS.RTRIG)) {\n          if (cid === CIDS.ESCAPE) {\n            return this.isPadButtonDown(CIDS.RANALOG) && this.isPadButtonDown(CIDS.LANALOG);\n          } else if (cid == CIDS.START) {\n            return this.isPadButtonDown(CIDS.RANALOG);\n          } else if (cid === CIDS.SELECT) {\n            return this.isPadButtonDown(CIDS.LANALOG);\n          }\n        }\n\n        return false;\n      }\n\n      return this.isPadButtonDown(cid);\n    }\n  }]);\n\n  return Controller;\n}();\nvar Controllers = /*#__PURE__*/function () {\n  function Controllers(controllerArray) {\n    var _this = this;\n\n    _classCallCheck(this, Controllers);\n\n    this.controllers = controllerArray;\n    var docElement = document.documentElement;\n    docElement.addEventListener(\"keydown\", function (e) {\n      return _this.handleKeyEvent(e, true);\n    });\n    docElement.addEventListener(\"keyup\", function (e) {\n      return _this.handleKeyEvent(e, false);\n    });\n  }\n\n  _createClass(Controllers, [{\n    key: \"handleKeyEvent\",\n    value: function handleKeyEvent(e, down) {\n      for (var i = 0; i < this.controllers.length; i++) {\n        this.controllers[i].handleKeyEvent(e, down);\n      }\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var clen = this.controllers.length;\n      var gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : [];\n      var padIdx = 0;\n\n      for (var idx = 0; padIdx < clen && idx < gamepads.length; idx++) {\n        var pad = gamepads[idx];\n\n        if (pad) {\n          this.controllers[padIdx].setPad(pad); // TODO: Set mapping (IOS, etc.)\n\n          padIdx++;\n        }\n      }\n\n      for (; padIdx < clen; padIdx++) {\n        this.controllers[padIdx].setPad(null);\n      }\n    }\n  }, {\n    key: \"isControlDown\",\n    value: function isControlDown(controllerIdx, cid) {\n      return this.controllers[controllerIdx].isControlDown(cid);\n    }\n  }]);\n\n  return Controllers;\n}();\n\n//# sourceURL=webpack:///./src/main/js/input/controls.js?");

/***/ }),

/***/ "./src/main/js/input/index.js":
/*!************************************!*\
  !*** ./src/main/js/input/index.js ***!
  \************************************/
/*! exports provided: CIDS, KCODES, PadMapping, StandardPadMapping, KeyCodeToControlMapping, DefaultKeyCodeToControlMapping, Controller, Controllers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controls.js */ \"./src/main/js/input/controls.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIDS\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"CIDS\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"KCODES\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"KCODES\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PadMapping\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"PadMapping\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StandardPadMapping\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"StandardPadMapping\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"KeyCodeToControlMapping\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"KeyCodeToControlMapping\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DefaultKeyCodeToControlMapping\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultKeyCodeToControlMapping\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Controller\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"Controller\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Controllers\", function() { return _controls_js__WEBPACK_IMPORTED_MODULE_0__[\"Controllers\"]; });\n\n\n\n//# sourceURL=webpack:///./src/main/js/input/index.js?");

/***/ }),

/***/ "./src/main/js/zip/3rdparty/zip.js":
/*!*****************************************!*\
  !*** ./src/main/js/zip/3rdparty/zip.js ***!
  \*****************************************/
/*! exports provided: zip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zip\", function() { return zip; });\n/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar zipExport = {};\n\n(function (obj) {\n  \"use strict\";\n\n  var ERR_BAD_FORMAT = \"File format is not recognized.\";\n  var ERR_CRC = \"CRC failed.\";\n  var ERR_ENCRYPTED = \"File contains encrypted entry.\";\n  var ERR_ZIP64 = \"File is using Zip64 (4gb+ file size).\";\n  var ERR_READ = \"Error while reading zip file.\";\n  var ERR_WRITE = \"Error while writing zip file.\";\n  var ERR_WRITE_DATA = \"Error while writing file data.\";\n  var ERR_READ_DATA = \"Error while reading file data.\";\n  var ERR_DUPLICATED_NAME = \"File already exists.\";\n  var CHUNK_SIZE = 512 * 1024;\n  var TEXT_PLAIN = \"text/plain\";\n  var appendABViewSupported;\n\n  try {\n    appendABViewSupported = new Blob([new DataView(new ArrayBuffer(0))]).size === 0;\n  } catch (e) {}\n\n  function Crc32() {\n    this.crc = -1;\n  }\n\n  Crc32.prototype.append = function append(data) {\n    var crc = this.crc | 0,\n        table = this.table;\n\n    for (var offset = 0, len = data.length | 0; offset < len; offset++) {\n      crc = crc >>> 8 ^ table[(crc ^ data[offset]) & 0xFF];\n    }\n\n    this.crc = crc;\n  };\n\n  Crc32.prototype.get = function get() {\n    return ~this.crc;\n  };\n\n  Crc32.prototype.table = function () {\n    var i,\n        j,\n        t,\n        table = []; // Uint32Array is actually slower than []\n\n    for (i = 0; i < 256; i++) {\n      t = i;\n\n      for (j = 0; j < 8; j++) {\n        if (t & 1) t = t >>> 1 ^ 0xEDB88320;else t = t >>> 1;\n      }\n\n      table[i] = t;\n    }\n\n    return table;\n  }(); // \"no-op\" codec\n\n\n  function NOOP() {}\n\n  NOOP.prototype.append = function append(bytes, onprogress) {\n    return bytes;\n  };\n\n  NOOP.prototype.flush = function flush() {};\n\n  function blobSlice(blob, index, length) {\n    if (index < 0 || length < 0 || index + length > blob.size) throw new RangeError('offset:' + index + ', length:' + length + ', size:' + blob.size);\n    if (blob.slice) return blob.slice(index, index + length);else if (blob.webkitSlice) return blob.webkitSlice(index, index + length);else if (blob.mozSlice) return blob.mozSlice(index, index + length);else if (blob.msSlice) return blob.msSlice(index, index + length);\n  }\n\n  function getDataHelper(byteLength, bytes) {\n    var dataBuffer, dataArray;\n    dataBuffer = new ArrayBuffer(byteLength);\n    dataArray = new Uint8Array(dataBuffer);\n    if (bytes) dataArray.set(bytes, 0);\n    return {\n      buffer: dataBuffer,\n      array: dataArray,\n      view: new DataView(dataBuffer)\n    };\n  } // Readers\n\n\n  function Reader() {}\n\n  function TextReader(text) {\n    var that = this,\n        blobReader;\n\n    function init(callback, onerror) {\n      var blob = new Blob([text], {\n        type: TEXT_PLAIN\n      });\n      blobReader = new BlobReader(blob);\n      blobReader.init(function () {\n        that.size = blobReader.size;\n        callback();\n      }, onerror);\n    }\n\n    function readUint8Array(index, length, callback, onerror) {\n      blobReader.readUint8Array(index, length, callback, onerror);\n    }\n\n    that.size = 0;\n    that.init = init;\n    that.readUint8Array = readUint8Array;\n  }\n\n  TextReader.prototype = new Reader();\n  TextReader.prototype.constructor = TextReader;\n\n  function Data64URIReader(dataURI) {\n    var that = this,\n        dataStart;\n\n    function init(callback) {\n      var dataEnd = dataURI.length;\n\n      while (dataURI.charAt(dataEnd - 1) == \"=\") {\n        dataEnd--;\n      }\n\n      dataStart = dataURI.indexOf(\",\") + 1;\n      that.size = Math.floor((dataEnd - dataStart) * 0.75);\n      callback();\n    }\n\n    function readUint8Array(index, length, callback) {\n      var i,\n          data = getDataHelper(length);\n      var start = Math.floor(index / 3) * 4;\n      var end = Math.ceil((index + length) / 3) * 4;\n      var bytes = obj.atob(dataURI.substring(start + dataStart, end + dataStart));\n      var delta = index - Math.floor(start / 4) * 3;\n\n      for (i = delta; i < delta + length; i++) {\n        data.array[i - delta] = bytes.charCodeAt(i);\n      }\n\n      callback(data.array);\n    }\n\n    that.size = 0;\n    that.init = init;\n    that.readUint8Array = readUint8Array;\n  }\n\n  Data64URIReader.prototype = new Reader();\n  Data64URIReader.prototype.constructor = Data64URIReader;\n\n  function BlobReader(blob) {\n    var that = this;\n\n    function init(callback) {\n      that.size = blob.size;\n      callback();\n    }\n\n    function readUint8Array(index, length, callback, onerror) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        callback(new Uint8Array(e.target.result));\n      };\n\n      reader.onerror = onerror;\n\n      try {\n        reader.readAsArrayBuffer(blobSlice(blob, index, length));\n      } catch (e) {\n        onerror(e);\n      }\n    }\n\n    that.size = 0;\n    that.init = init;\n    that.readUint8Array = readUint8Array;\n  }\n\n  BlobReader.prototype = new Reader();\n  BlobReader.prototype.constructor = BlobReader; // Writers\n\n  function Writer() {}\n\n  Writer.prototype.getData = function (callback) {\n    callback(this.data);\n  };\n\n  function TextWriter(encoding) {\n    var that = this,\n        blob;\n\n    function init(callback) {\n      blob = new Blob([], {\n        type: TEXT_PLAIN\n      });\n      callback();\n    }\n\n    function writeUint8Array(array, callback) {\n      blob = new Blob([blob, appendABViewSupported ? array : array.buffer], {\n        type: TEXT_PLAIN\n      });\n      callback();\n    }\n\n    function getData(callback, onerror) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        callback(e.target.result);\n      };\n\n      reader.onerror = onerror;\n      reader.readAsText(blob, encoding);\n    }\n\n    that.init = init;\n    that.writeUint8Array = writeUint8Array;\n    that.getData = getData;\n  }\n\n  TextWriter.prototype = new Writer();\n  TextWriter.prototype.constructor = TextWriter;\n\n  function Data64URIWriter(contentType) {\n    var that = this,\n        data = \"\",\n        pending = \"\";\n\n    function init(callback) {\n      data += \"data:\" + (contentType || \"\") + \";base64,\";\n      callback();\n    }\n\n    function writeUint8Array(array, callback) {\n      var i,\n          delta = pending.length,\n          dataString = pending;\n      pending = \"\";\n\n      for (i = 0; i < Math.floor((delta + array.length) / 3) * 3 - delta; i++) {\n        dataString += String.fromCharCode(array[i]);\n      }\n\n      for (; i < array.length; i++) {\n        pending += String.fromCharCode(array[i]);\n      }\n\n      if (dataString.length > 2) data += obj.btoa(dataString);else pending = dataString;\n      callback();\n    }\n\n    function getData(callback) {\n      callback(data + obj.btoa(pending));\n    }\n\n    that.init = init;\n    that.writeUint8Array = writeUint8Array;\n    that.getData = getData;\n  }\n\n  Data64URIWriter.prototype = new Writer();\n  Data64URIWriter.prototype.constructor = Data64URIWriter;\n\n  function BlobWriter(contentType) {\n    var blob,\n        that = this;\n\n    function init(callback) {\n      blob = new Blob([], {\n        type: contentType\n      });\n      callback();\n    }\n\n    function writeUint8Array(array, callback) {\n      blob = new Blob([blob, appendABViewSupported ? array : array.buffer], {\n        type: contentType\n      });\n      callback();\n    }\n\n    function getData(callback) {\n      callback(blob);\n    }\n\n    that.init = init;\n    that.writeUint8Array = writeUint8Array;\n    that.getData = getData;\n  }\n\n  BlobWriter.prototype = new Writer();\n  BlobWriter.prototype.constructor = BlobWriter;\n  /**\n   * inflate/deflate core functions\n   * @param worker {Worker} web worker for the task.\n   * @param initialMessage {Object} initial message to be sent to the worker. should contain\n   *   sn(serial number for distinguishing multiple tasks sent to the worker), and codecClass.\n   *   This function may add more properties before sending.\n   */\n\n  function launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror) {\n    var chunkIndex = 0,\n        index,\n        outputSize,\n        sn = initialMessage.sn,\n        crc;\n\n    function onflush() {\n      worker.removeEventListener('message', onmessage, false);\n      onend(outputSize, crc);\n    }\n\n    function onmessage(event) {\n      var message = event.data,\n          data = message.data,\n          err = message.error;\n\n      if (err) {\n        err.toString = function () {\n          return 'Error: ' + this.message;\n        };\n\n        onreaderror(err);\n        return;\n      }\n\n      if (message.sn !== sn) return;\n      if (typeof message.codecTime === 'number') worker.codecTime += message.codecTime; // should be before onflush()\n\n      if (typeof message.crcTime === 'number') worker.crcTime += message.crcTime;\n\n      switch (message.type) {\n        case 'append':\n          if (data) {\n            outputSize += data.length;\n            writer.writeUint8Array(data, function () {\n              step();\n            }, onwriteerror);\n          } else step();\n\n          break;\n\n        case 'flush':\n          crc = message.crc;\n\n          if (data) {\n            outputSize += data.length;\n            writer.writeUint8Array(data, function () {\n              onflush();\n            }, onwriteerror);\n          } else onflush();\n\n          break;\n\n        case 'progress':\n          if (onprogress) onprogress(index + message.loaded, size);\n          break;\n\n        case 'importScripts': //no need to handle here\n\n        case 'newTask':\n        case 'echo':\n          break;\n\n        default:\n          console.warn('zip.js:launchWorkerProcess: unknown message: ', message);\n      }\n    }\n\n    function step() {\n      index = chunkIndex * CHUNK_SIZE; // use `<=` instead of `<`, because `size` may be 0.\n\n      if (index <= size) {\n        reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function (array) {\n          if (onprogress) onprogress(index, size);\n          var msg = index === 0 ? initialMessage : {\n            sn: sn\n          };\n          msg.type = 'append';\n          msg.data = array; // posting a message with transferables will fail on IE10\n\n          try {\n            worker.postMessage(msg, [array.buffer]);\n          } catch (ex) {\n            worker.postMessage(msg); // retry without transferables\n          }\n\n          chunkIndex++;\n        }, onreaderror);\n      } else {\n        worker.postMessage({\n          sn: sn,\n          type: 'flush'\n        });\n      }\n    }\n\n    outputSize = 0;\n    worker.addEventListener('message', onmessage, false);\n    step();\n  }\n\n  function launchProcess(process, reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror) {\n    var chunkIndex = 0,\n        index,\n        outputSize = 0,\n        crcInput = crcType === 'input',\n        crcOutput = crcType === 'output',\n        crc = new Crc32();\n\n    function step() {\n      var outputData;\n      index = chunkIndex * CHUNK_SIZE;\n      if (index < size) reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function (inputData) {\n        var outputData;\n\n        try {\n          outputData = process.append(inputData, function (loaded) {\n            if (onprogress) onprogress(index + loaded, size);\n          });\n        } catch (e) {\n          onreaderror(e);\n          return;\n        }\n\n        if (outputData) {\n          outputSize += outputData.length;\n          writer.writeUint8Array(outputData, function () {\n            chunkIndex++;\n            setTimeout(step, 1);\n          }, onwriteerror);\n          if (crcOutput) crc.append(outputData);\n        } else {\n          chunkIndex++;\n          setTimeout(step, 1);\n        }\n\n        if (crcInput) crc.append(inputData);\n        if (onprogress) onprogress(index, size);\n      }, onreaderror);else {\n        try {\n          outputData = process.flush();\n        } catch (e) {\n          onreaderror(e);\n          return;\n        }\n\n        if (outputData) {\n          if (crcOutput) crc.append(outputData);\n          outputSize += outputData.length;\n          writer.writeUint8Array(outputData, function () {\n            onend(outputSize, crc.get());\n          }, onwriteerror);\n        } else onend(outputSize, crc.get());\n      }\n    }\n\n    step();\n  }\n\n  function inflate(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\n    var crcType = computeCrc32 ? 'output' : 'none';\n\n    if (obj.zip.useWebWorkers) {\n      var initialMessage = {\n        sn: sn,\n        codecClass: 'Inflater',\n        crcType: crcType\n      };\n      launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);\n    } else launchProcess(new obj.zip.Inflater(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);\n  }\n\n  function deflate(worker, sn, reader, writer, level, onend, onprogress, onreaderror, onwriteerror) {\n    var crcType = 'input';\n\n    if (obj.zip.useWebWorkers) {\n      var initialMessage = {\n        sn: sn,\n        options: {\n          level: level\n        },\n        codecClass: 'Deflater',\n        crcType: crcType\n      };\n      launchWorkerProcess(worker, initialMessage, reader, writer, 0, reader.size, onprogress, onend, onreaderror, onwriteerror);\n    } else launchProcess(new obj.zip.Deflater(), reader, writer, 0, reader.size, crcType, onprogress, onend, onreaderror, onwriteerror);\n  }\n\n  function copy(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\n    var crcType = 'input';\n\n    if (obj.zip.useWebWorkers && computeCrc32) {\n      var initialMessage = {\n        sn: sn,\n        codecClass: 'NOOP',\n        crcType: crcType\n      };\n      launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);\n    } else launchProcess(new NOOP(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);\n  } // ZipReader\n\n\n  function decodeASCII(str) {\n    var i,\n        out = \"\",\n        charCode,\n        extendedASCII = [\"\\xC7\", \"\\xFC\", \"\\xE9\", \"\\xE2\", \"\\xE4\", \"\\xE0\", \"\\xE5\", \"\\xE7\", \"\\xEA\", \"\\xEB\", \"\\xE8\", \"\\xEF\", \"\\xEE\", \"\\xEC\", \"\\xC4\", \"\\xC5\", \"\\xC9\", \"\\xE6\", \"\\xC6\", \"\\xF4\", \"\\xF6\", \"\\xF2\", \"\\xFB\", \"\\xF9\", \"\\xFF\", \"\\xD6\", \"\\xDC\", \"\\xF8\", \"\\xA3\", \"\\xD8\", \"\\xD7\", \"\\u0192\", \"\\xE1\", \"\\xED\", \"\\xF3\", \"\\xFA\", \"\\xF1\", \"\\xD1\", \"\\xAA\", \"\\xBA\", \"\\xBF\", \"\\xAE\", \"\\xAC\", \"\\xBD\", \"\\xBC\", \"\\xA1\", \"\\xAB\", \"\\xBB\", '_', '_', '_', \"\\xA6\", \"\\xA6\", \"\\xC1\", \"\\xC2\", \"\\xC0\", \"\\xA9\", \"\\xA6\", \"\\xA6\", '+', '+', \"\\xA2\", \"\\xA5\", '+', '+', '-', '-', '+', '-', '+', \"\\xE3\", \"\\xC3\", '+', '+', '-', '-', \"\\xA6\", '-', '+', \"\\xA4\", \"\\xF0\", \"\\xD0\", \"\\xCA\", \"\\xCB\", \"\\xC8\", 'i', \"\\xCD\", \"\\xCE\", \"\\xCF\", '+', '+', '_', '_', \"\\xA6\", \"\\xCC\", '_', \"\\xD3\", \"\\xDF\", \"\\xD4\", \"\\xD2\", \"\\xF5\", \"\\xD5\", \"\\xB5\", \"\\xFE\", \"\\xDE\", \"\\xDA\", \"\\xDB\", \"\\xD9\", \"\\xFD\", \"\\xDD\", \"\\xAF\", \"\\xB4\", \"\\xAD\", \"\\xB1\", '_', \"\\xBE\", \"\\xB6\", \"\\xA7\", \"\\xF7\", \"\\xB8\", \"\\xB0\", \"\\xA8\", \"\\xB7\", \"\\xB9\", \"\\xB3\", \"\\xB2\", '_', ' '];\n\n    for (i = 0; i < str.length; i++) {\n      charCode = str.charCodeAt(i) & 0xFF;\n      if (charCode > 127) out += extendedASCII[charCode - 128];else out += String.fromCharCode(charCode);\n    }\n\n    return out;\n  }\n\n  function decodeUTF8(string) {\n    return decodeURIComponent(escape(string));\n  }\n\n  function getString(bytes) {\n    var i,\n        str = \"\";\n\n    for (i = 0; i < bytes.length; i++) {\n      str += String.fromCharCode(bytes[i]);\n    }\n\n    return str;\n  }\n\n  function getDate(timeRaw) {\n    var date = (timeRaw & 0xffff0000) >> 16,\n        time = timeRaw & 0x0000ffff;\n\n    try {\n      return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);\n    } catch (e) {}\n  }\n\n  function readCommonHeader(entry, data, index, centralDirectory, onerror) {\n    entry.version = data.view.getUint16(index, true);\n    entry.bitFlag = data.view.getUint16(index + 2, true);\n    entry.compressionMethod = data.view.getUint16(index + 4, true);\n    entry.lastModDateRaw = data.view.getUint32(index + 6, true);\n    entry.lastModDate = getDate(entry.lastModDateRaw);\n\n    if ((entry.bitFlag & 0x01) === 0x01) {\n      onerror(ERR_ENCRYPTED);\n      return;\n    }\n\n    if (centralDirectory || (entry.bitFlag & 0x0008) != 0x0008) {\n      entry.crc32 = data.view.getUint32(index + 10, true);\n      entry.compressedSize = data.view.getUint32(index + 14, true);\n      entry.uncompressedSize = data.view.getUint32(index + 18, true);\n    }\n\n    if (entry.compressedSize === 0xFFFFFFFF || entry.uncompressedSize === 0xFFFFFFFF) {\n      onerror(ERR_ZIP64);\n      return;\n    }\n\n    entry.filenameLength = data.view.getUint16(index + 22, true);\n    entry.extraFieldLength = data.view.getUint16(index + 24, true);\n  }\n\n  function createZipReader(reader, callback, onerror) {\n    var inflateSN = 0;\n\n    function Entry() {}\n\n    Entry.prototype.getData = function (writer, onend, onprogress, checkCrc32) {\n      var that = this;\n\n      function testCrc32(crc32) {\n        var dataCrc32 = getDataHelper(4);\n        dataCrc32.view.setUint32(0, crc32);\n        return that.crc32 == dataCrc32.view.getUint32(0);\n      }\n\n      function getWriterData(uncompressedSize, crc32) {\n        if (checkCrc32 && !testCrc32(crc32)) onerror(ERR_CRC);else writer.getData(function (data) {\n          onend(data);\n        });\n      }\n\n      function onreaderror(err) {\n        onerror(err || ERR_READ_DATA);\n      }\n\n      function onwriteerror(err) {\n        onerror(err || ERR_WRITE_DATA);\n      }\n\n      reader.readUint8Array(that.offset, 30, function (bytes) {\n        var data = getDataHelper(bytes.length, bytes),\n            dataOffset;\n\n        if (data.view.getUint32(0) != 0x504b0304) {\n          onerror(ERR_BAD_FORMAT);\n          return;\n        }\n\n        readCommonHeader(that, data, 4, false, onerror);\n        dataOffset = that.offset + 30 + that.filenameLength + that.extraFieldLength;\n        writer.init(function () {\n          if (that.compressionMethod === 0) copy(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);else inflate(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\n        }, onwriteerror);\n      }, onreaderror);\n    };\n\n    function seekEOCDR(eocdrCallback) {\n      // \"End of central directory record\" is the last part of a zip archive, and is at least 22 bytes long.\n      // Zip file comment is the last part of EOCDR and has max length of 64KB,\n      // so we only have to search the last 64K + 22 bytes of a archive for EOCDR signature (0x06054b50).\n      var EOCDR_MIN = 22;\n\n      if (reader.size < EOCDR_MIN) {\n        onerror(ERR_BAD_FORMAT);\n        return;\n      }\n\n      var ZIP_COMMENT_MAX = 256 * 256,\n          EOCDR_MAX = EOCDR_MIN + ZIP_COMMENT_MAX; // In most cases, the EOCDR is EOCDR_MIN bytes long\n\n      doSeek(EOCDR_MIN, function () {\n        // If not found, try within EOCDR_MAX bytes\n        doSeek(Math.min(EOCDR_MAX, reader.size), function () {\n          onerror(ERR_BAD_FORMAT);\n        });\n      }); // seek last length bytes of file for EOCDR\n\n      function doSeek(length, eocdrNotFoundCallback) {\n        reader.readUint8Array(reader.size - length, length, function (bytes) {\n          for (var i = bytes.length - EOCDR_MIN; i >= 0; i--) {\n            if (bytes[i] === 0x50 && bytes[i + 1] === 0x4b && bytes[i + 2] === 0x05 && bytes[i + 3] === 0x06) {\n              eocdrCallback(new DataView(bytes.buffer, i, EOCDR_MIN));\n              return;\n            }\n          }\n\n          eocdrNotFoundCallback();\n        }, function () {\n          onerror(ERR_READ);\n        });\n      }\n    }\n\n    var zipReader = {\n      getEntries: function getEntries(callback) {\n        var worker = this._worker; // look for End of central directory record\n\n        seekEOCDR(function (dataView) {\n          var datalength, fileslength;\n          datalength = dataView.getUint32(16, true);\n          fileslength = dataView.getUint16(8, true);\n\n          if (datalength < 0 || datalength >= reader.size) {\n            onerror(ERR_BAD_FORMAT);\n            return;\n          }\n\n          reader.readUint8Array(datalength, reader.size - datalength, function (bytes) {\n            var i,\n                index = 0,\n                entries = [],\n                entry,\n                filename,\n                comment,\n                data = getDataHelper(bytes.length, bytes);\n\n            for (i = 0; i < fileslength; i++) {\n              entry = new Entry();\n              entry._worker = worker;\n\n              if (data.view.getUint32(index) != 0x504b0102) {\n                onerror(ERR_BAD_FORMAT);\n                return;\n              }\n\n              readCommonHeader(entry, data, index + 6, true, onerror);\n              entry.commentLength = data.view.getUint16(index + 32, true);\n              entry.directory = (data.view.getUint8(index + 38) & 0x10) == 0x10;\n              entry.offset = data.view.getUint32(index + 42, true);\n              filename = getString(data.array.subarray(index + 46, index + 46 + entry.filenameLength));\n              entry.filename = (entry.bitFlag & 0x0800) === 0x0800 ? decodeUTF8(filename) : decodeASCII(filename);\n              if (!entry.directory && entry.filename.charAt(entry.filename.length - 1) == \"/\") entry.directory = true;\n              comment = getString(data.array.subarray(index + 46 + entry.filenameLength + entry.extraFieldLength, index + 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength));\n              entry.comment = (entry.bitFlag & 0x0800) === 0x0800 ? decodeUTF8(comment) : decodeASCII(comment);\n              entries.push(entry);\n              index += 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength;\n            }\n\n            callback(entries);\n          }, function () {\n            onerror(ERR_READ);\n          });\n        });\n      },\n      close: function close(callback) {\n        if (this._worker) {\n          this._worker.terminate();\n\n          this._worker = null;\n        }\n\n        if (callback) callback();\n      },\n      _worker: null\n    };\n    if (!obj.zip.useWebWorkers) callback(zipReader);else {\n      createWorker('inflater', function (worker) {\n        zipReader._worker = worker;\n        callback(zipReader);\n      }, function (err) {\n        onerror(err);\n      });\n    }\n  } // ZipWriter\n\n\n  function encodeUTF8(string) {\n    return unescape(encodeURIComponent(string));\n  }\n\n  function getBytes(str) {\n    var i,\n        array = [];\n\n    for (i = 0; i < str.length; i++) {\n      array.push(str.charCodeAt(i));\n    }\n\n    return array;\n  }\n\n  function createZipWriter(writer, callback, onerror, dontDeflate) {\n    var files = {},\n        filenames = [],\n        datalength = 0;\n    var deflateSN = 0;\n\n    function onwriteerror(err) {\n      onerror(err || ERR_WRITE);\n    }\n\n    function onreaderror(err) {\n      onerror(err || ERR_READ_DATA);\n    }\n\n    var zipWriter = {\n      add: function add(name, reader, onend, onprogress, options) {\n        var header, filename, date;\n        var worker = this._worker;\n\n        function writeHeader(callback) {\n          var data;\n          date = options.lastModDate || new Date();\n          header = getDataHelper(26);\n          files[name] = {\n            headerArray: header.array,\n            directory: options.directory,\n            filename: filename,\n            offset: datalength,\n            comment: getBytes(encodeUTF8(options.comment || \"\"))\n          };\n          header.view.setUint32(0, 0x14000808);\n          if (options.version) header.view.setUint8(0, options.version);\n          if (!dontDeflate && options.level !== 0 && !options.directory) header.view.setUint16(4, 0x0800);\n          header.view.setUint16(6, (date.getHours() << 6 | date.getMinutes()) << 5 | date.getSeconds() / 2, true);\n          header.view.setUint16(8, (date.getFullYear() - 1980 << 4 | date.getMonth() + 1) << 5 | date.getDate(), true);\n          header.view.setUint16(22, filename.length, true);\n          data = getDataHelper(30 + filename.length);\n          data.view.setUint32(0, 0x504b0304);\n          data.array.set(header.array, 4);\n          data.array.set(filename, 30);\n          datalength += data.array.length;\n          writer.writeUint8Array(data.array, callback, onwriteerror);\n        }\n\n        function writeFooter(compressedLength, crc32) {\n          var footer = getDataHelper(16);\n          datalength += compressedLength || 0;\n          footer.view.setUint32(0, 0x504b0708);\n\n          if (typeof crc32 != \"undefined\") {\n            header.view.setUint32(10, crc32, true);\n            footer.view.setUint32(4, crc32, true);\n          }\n\n          if (reader) {\n            footer.view.setUint32(8, compressedLength, true);\n            header.view.setUint32(14, compressedLength, true);\n            footer.view.setUint32(12, reader.size, true);\n            header.view.setUint32(18, reader.size, true);\n          }\n\n          writer.writeUint8Array(footer.array, function () {\n            datalength += 16;\n            onend();\n          }, onwriteerror);\n        }\n\n        function writeFile() {\n          options = options || {};\n          name = name.trim();\n          if (options.directory && name.charAt(name.length - 1) != \"/\") name += \"/\";\n\n          if (files.hasOwnProperty(name)) {\n            onerror(ERR_DUPLICATED_NAME);\n            return;\n          }\n\n          filename = getBytes(encodeUTF8(name));\n          filenames.push(name);\n          writeHeader(function () {\n            if (reader) {\n              if (dontDeflate || options.level === 0) copy(worker, deflateSN++, reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);else deflate(worker, deflateSN++, reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);\n            } else writeFooter();\n          }, onwriteerror);\n        }\n\n        if (reader) reader.init(writeFile, onreaderror);else writeFile();\n      },\n      close: function close(callback) {\n        if (this._worker) {\n          this._worker.terminate();\n\n          this._worker = null;\n        }\n\n        var data,\n            length = 0,\n            index = 0,\n            indexFilename,\n            file;\n\n        for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n          file = files[filenames[indexFilename]];\n          length += 46 + file.filename.length + file.comment.length;\n        }\n\n        data = getDataHelper(length + 22);\n\n        for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n          file = files[filenames[indexFilename]];\n          data.view.setUint32(index, 0x504b0102);\n          data.view.setUint16(index + 4, 0x1400);\n          data.array.set(file.headerArray, index + 6);\n          data.view.setUint16(index + 32, file.comment.length, true);\n          if (file.directory) data.view.setUint8(index + 38, 0x10);\n          data.view.setUint32(index + 42, file.offset, true);\n          data.array.set(file.filename, index + 46);\n          data.array.set(file.comment, index + 46 + file.filename.length);\n          index += 46 + file.filename.length + file.comment.length;\n        }\n\n        data.view.setUint32(index, 0x504b0506);\n        data.view.setUint16(index + 8, filenames.length, true);\n        data.view.setUint16(index + 10, filenames.length, true);\n        data.view.setUint32(index + 12, length, true);\n        data.view.setUint32(index + 16, datalength, true);\n        writer.writeUint8Array(data.array, function () {\n          writer.getData(callback);\n        }, onwriteerror);\n      },\n      _worker: null\n    };\n    if (!obj.zip.useWebWorkers) callback(zipWriter);else {\n      createWorker('deflater', function (worker) {\n        zipWriter._worker = worker;\n        callback(zipWriter);\n      }, function (err) {\n        onerror(err);\n      });\n    }\n  }\n\n  function resolveURLs(urls) {\n    var a = document.createElement('a');\n    return urls.map(function (url) {\n      a.href = url;\n      return a.href;\n    });\n  }\n\n  var DEFAULT_WORKER_SCRIPTS = {\n    deflater: ['z-worker.js', 'deflate.js'],\n    inflater: ['z-worker.js', 'inflate.js']\n  };\n\n  function createWorker(type, callback, onerror) {\n    if (obj.zip.workerScripts !== null && obj.zip.workerScriptsPath !== null) {\n      onerror(new Error('Either zip.workerScripts or zip.workerScriptsPath may be set, not both.'));\n      return;\n    }\n\n    var scripts;\n\n    if (obj.zip.workerScripts) {\n      scripts = obj.zip.workerScripts[type];\n\n      if (!Array.isArray(scripts)) {\n        onerror(new Error('zip.workerScripts.' + type + ' is not an array!'));\n        return;\n      }\n\n      scripts = resolveURLs(scripts);\n    } else {\n      scripts = DEFAULT_WORKER_SCRIPTS[type].slice(0);\n      scripts[0] = (obj.zip.workerScriptsPath || '') + scripts[0];\n    }\n\n    var worker = new Worker(scripts[0]); // record total consumed time by inflater/deflater/crc32 in this worker\n\n    worker.codecTime = worker.crcTime = 0;\n    worker.postMessage({\n      type: 'importScripts',\n      scripts: scripts.slice(1)\n    });\n    worker.addEventListener('message', onmessage);\n\n    function onmessage(ev) {\n      var msg = ev.data;\n\n      if (msg.error) {\n        worker.terminate(); // should before onerror(), because onerror() may throw.\n\n        onerror(msg.error);\n        return;\n      }\n\n      if (msg.type === 'importScripts') {\n        worker.removeEventListener('message', onmessage);\n        worker.removeEventListener('error', errorHandler);\n        callback(worker);\n      }\n    } // catch entry script loading error and other unhandled errors\n\n\n    worker.addEventListener('error', errorHandler);\n\n    function errorHandler(err) {\n      worker.terminate();\n      onerror(err);\n    }\n  }\n\n  function onerror_default(error) {\n    console.error(error);\n  }\n\n  obj.zip = {\n    Reader: Reader,\n    Writer: Writer,\n    BlobReader: BlobReader,\n    Data64URIReader: Data64URIReader,\n    TextReader: TextReader,\n    BlobWriter: BlobWriter,\n    Data64URIWriter: Data64URIWriter,\n    TextWriter: TextWriter,\n    createReader: function createReader(reader, callback, onerror) {\n      onerror = onerror || onerror_default;\n      reader.init(function () {\n        createZipReader(reader, callback, onerror);\n      }, onerror);\n    },\n    createWriter: function createWriter(writer, callback, onerror, dontDeflate) {\n      onerror = onerror || onerror_default;\n      dontDeflate = !!dontDeflate;\n      writer.init(function () {\n        createZipWriter(writer, callback, onerror, dontDeflate);\n      }, onerror);\n    },\n    useWebWorkers: true,\n\n    /**\n     * Directory containing the default worker scripts (z-worker.js, deflate.js, and inflate.js), relative to current base url.\n     * E.g.: zip.workerScripts = './';\n     */\n    workerScriptsPath: null,\n\n    /**\n     * Advanced option to control which scripts are loaded in the Web worker. If this option is specified, then workerScriptsPath must not be set.\n     * workerScripts.deflater/workerScripts.inflater should be arrays of urls to scripts for deflater/inflater, respectively.\n     * Scripts in the array are executed in order, and the first one should be z-worker.js, which is used to start the worker.\n     * All urls are relative to current base url.\n     * E.g.:\n     * zip.workerScripts = {\n     *   deflater: ['z-worker.js', 'deflate.js'],\n     *   inflater: ['z-worker.js', 'inflate.js']\n     * };\n     */\n    workerScripts: null\n  };\n})(zipExport);\n/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n\n(function (global) {\n  \"use strict\"; // Global\n\n  var MAX_BITS = 15;\n  var Z_OK = 0;\n  var Z_STREAM_END = 1;\n  var Z_NEED_DICT = 2;\n  var Z_STREAM_ERROR = -2;\n  var Z_DATA_ERROR = -3;\n  var Z_MEM_ERROR = -4;\n  var Z_BUF_ERROR = -5;\n  var inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n  var MANY = 1440; // JZlib version : \"1.0.2\"\n\n  var Z_NO_FLUSH = 0;\n  var Z_FINISH = 4; // InfTree\n\n  var fixed_bl = 9;\n  var fixed_bd = 5;\n  var fixed_tl = [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255];\n  var fixed_td = [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577]; // Tables for deflate from PKZIP's appnote.txt.\n\n  var cplens = [// Copy lengths for literal codes 257..285\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]; // see note #13 above about 258\n\n  var cplext = [// Extra bits for literal codes 257..285\n  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n  ];\n  var cpdist = [// Copy offsets for distance codes 0..29\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\n  var cpdext = [// Extra bits for distance codes\n  0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]; // If BMAX needs to be larger than 16, then h and x[] should be uLong.\n\n  var BMAX = 15; // maximum bit length of any code\n\n  function InfTree() {\n    var that = this;\n    var hn; // hufts used in space\n\n    var v; // work area for huft_build\n\n    var c; // bit length count table\n\n    var r; // table entry for structure assignment\n\n    var u; // table stack\n\n    var x; // bit offsets, then code stack\n\n    function huft_build(b, // code lengths in bits (all assumed <=\n    // BMAX)\n    bindex, n, // number of codes (assumed <= 288)\n    s, // number of simple-valued codes (0..s-1)\n    d, // list of base values for non-simple codes\n    e, // list of extra bits for non-simple codes\n    t, // result: starting table\n    m, // maximum lookup bits, returns actual\n    hp, // space for trees\n    hn, // hufts used in space\n    v // working area: values in order of bit length\n    ) {\n      // Given a list of code lengths and a maximum table size, make a set of\n      // tables to decode that set of codes. Return Z_OK on success,\n      // Z_BUF_ERROR\n      // if the given code set is incomplete (the tables are still built in\n      // this\n      // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n      // of\n      // lengths), or Z_MEM_ERROR if not enough memory.\n      var a; // counter for codes of length k\n\n      var f; // i repeats in table every f entries\n\n      var g; // maximum code length\n\n      var h; // table level\n\n      var i; // counter, current code\n\n      var j; // counter\n\n      var k; // number of bits in current code\n\n      var l; // bits per table (returned in m)\n\n      var mask; // (1 << w) - 1, to avoid cc -O bug on HP\n\n      var p; // pointer into c[], b[], or v[]\n\n      var q; // points to current table\n\n      var w; // bits before this table == (l * h)\n\n      var xp; // pointer into x\n\n      var y; // number of dummy codes added\n\n      var z; // number of entries in current table\n      // Generate counts for each bit length\n\n      p = 0;\n      i = n;\n\n      do {\n        c[b[bindex + p]]++;\n        p++;\n        i--; // assume all entries <= BMAX\n      } while (i !== 0);\n\n      if (c[0] == n) {\n        // null input--all zero length codes\n        t[0] = -1;\n        m[0] = 0;\n        return Z_OK;\n      } // Find minimum and maximum length, bound *m by those\n\n\n      l = m[0];\n\n      for (j = 1; j <= BMAX; j++) {\n        if (c[j] !== 0) break;\n      }\n\n      k = j; // minimum code length\n\n      if (l < j) {\n        l = j;\n      }\n\n      for (i = BMAX; i !== 0; i--) {\n        if (c[i] !== 0) break;\n      }\n\n      g = i; // maximum code length\n\n      if (l > i) {\n        l = i;\n      }\n\n      m[0] = l; // Adjust last length count to fill out codes, if needed\n\n      for (y = 1 << j; j < i; j++, y <<= 1) {\n        if ((y -= c[j]) < 0) {\n          return Z_DATA_ERROR;\n        }\n      }\n\n      if ((y -= c[i]) < 0) {\n        return Z_DATA_ERROR;\n      }\n\n      c[i] += y; // Generate starting offsets into the value table for each length\n\n      x[1] = j = 0;\n      p = 1;\n      xp = 2;\n\n      while (--i !== 0) {\n        // note that i == g from above\n        x[xp] = j += c[p];\n        xp++;\n        p++;\n      } // Make a table of values in order of bit lengths\n\n\n      i = 0;\n      p = 0;\n\n      do {\n        if ((j = b[bindex + p]) !== 0) {\n          v[x[j]++] = i;\n        }\n\n        p++;\n      } while (++i < n);\n\n      n = x[g]; // set n to length of v\n      // Generate the Huffman codes and for each, make the table entries\n\n      x[0] = i = 0; // first Huffman code is zero\n\n      p = 0; // grab values in bit order\n\n      h = -1; // no tables yet--level -1\n\n      w = -l; // bits decoded == (l * h)\n\n      u[0] = 0; // just to keep compilers happy\n\n      q = 0; // ditto\n\n      z = 0; // ditto\n      // go through the bit lengths (k already is bits in shortest code)\n\n      for (; k <= g; k++) {\n        a = c[k];\n\n        while (a-- !== 0) {\n          // here i is the Huffman code of length k bits for value *p\n          // make tables up to required level\n          while (k > w + l) {\n            h++;\n            w += l; // previous table always l bits\n            // compute minimum size table less than or equal to l bits\n\n            z = g - w;\n            z = z > l ? l : z; // table size upper limit\n\n            if ((f = 1 << (j = k - w)) > a + 1) {\n              // try a k-w bit table\n              // too few codes for\n              // k-w bit table\n              f -= a + 1; // deduct codes from patterns left\n\n              xp = k;\n\n              if (j < z) {\n                while (++j < z) {\n                  // try smaller tables up to z bits\n                  if ((f <<= 1) <= c[++xp]) break; // enough codes to use up j bits\n\n                  f -= c[xp]; // else deduct codes from patterns\n                }\n              }\n            }\n\n            z = 1 << j; // table entries for j-bit table\n            // allocate new table\n\n            if (hn[0] + z > MANY) {\n              // (note: doesn't matter for fixed)\n              return Z_DATA_ERROR; // overflow of MANY\n            }\n\n            u[h] = q =\n            /* hp+ */\n            hn[0]; // DEBUG\n\n            hn[0] += z; // connect to last table, if there is one\n\n            if (h !== 0) {\n              x[h] = i; // save pattern for backing up\n\n              r[0] =\n              /* (byte) */\n              j; // bits in this table\n\n              r[1] =\n              /* (byte) */\n              l; // bits to dump before this table\n\n              j = i >>> w - l;\n              r[2] =\n              /* (int) */\n              q - u[h - 1] - j; // offset to this table\n\n              hp.set(r, (u[h - 1] + j) * 3); // to\n              // last\n              // table\n            } else {\n              t[0] = q; // first table is returned result\n            }\n          } // set up table entry in r\n\n\n          r[1] =\n          /* (byte) */\n          k - w;\n\n          if (p >= n) {\n            r[0] = 128 + 64; // out of values--invalid code\n          } else if (v[p] < s) {\n            r[0] =\n            /* (byte) */\n            v[p] < 256 ? 0 : 32 + 64; // 256 is\n            // end-of-block\n\n            r[2] = v[p++]; // simple code is just the value\n          } else {\n            r[0] =\n            /* (byte) */\n            e[v[p] - s] + 16 + 64; // non-simple--look\n            // up in lists\n\n            r[2] = d[v[p++] - s];\n          } // fill code-like entries with r\n\n\n          f = 1 << k - w;\n\n          for (j = i >>> w; j < z; j += f) {\n            hp.set(r, (q + j) * 3);\n          } // backwards increment the k-bit code i\n\n\n          for (j = 1 << k - 1; (i & j) !== 0; j >>>= 1) {\n            i ^= j;\n          }\n\n          i ^= j; // backup over finished tables\n\n          mask = (1 << w) - 1; // needed on HP, cc -O bug\n\n          while ((i & mask) != x[h]) {\n            h--; // don't need to update q\n\n            w -= l;\n            mask = (1 << w) - 1;\n          }\n        }\n      } // Return Z_BUF_ERROR if we were given an incomplete table\n\n\n      return y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n    }\n\n    function initWorkArea(vsize) {\n      var i;\n\n      if (!hn) {\n        hn = []; // []; //new Array(1);\n\n        v = []; // new Array(vsize);\n\n        c = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\n        r = []; // new Array(3);\n\n        u = new Int32Array(BMAX); // new Array(BMAX);\n\n        x = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n      }\n\n      if (v.length < vsize) {\n        v = []; // new Array(vsize);\n      }\n\n      for (i = 0; i < vsize; i++) {\n        v[i] = 0;\n      }\n\n      for (i = 0; i < BMAX + 1; i++) {\n        c[i] = 0;\n      }\n\n      for (i = 0; i < 3; i++) {\n        r[i] = 0;\n      } // for(int i=0; i<BMAX; i++){u[i]=0;}\n\n\n      u.set(c.subarray(0, BMAX), 0); // for(int i=0; i<BMAX+1; i++){x[i]=0;}\n\n      x.set(c.subarray(0, BMAX + 1), 0);\n    }\n\n    that.inflate_trees_bits = function (c, // 19 code lengths\n    bb, // bits tree desired/actual depth\n    tb, // bits tree result\n    hp, // space for trees\n    z // for messages\n    ) {\n      var result;\n      initWorkArea(19);\n      hn[0] = 0;\n      result = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n\n      if (result == Z_DATA_ERROR) {\n        z.msg = \"oversubscribed dynamic bit lengths tree\";\n      } else if (result == Z_BUF_ERROR || bb[0] === 0) {\n        z.msg = \"incomplete dynamic bit lengths tree\";\n        result = Z_DATA_ERROR;\n      }\n\n      return result;\n    };\n\n    that.inflate_trees_dynamic = function (nl, // number of literal/length codes\n    nd, // number of distance codes\n    c, // that many (total) code lengths\n    bl, // literal desired/actual bit depth\n    bd, // distance desired/actual bit depth\n    tl, // literal/length tree result\n    td, // distance tree result\n    hp, // space for trees\n    z // for messages\n    ) {\n      var result; // build literal/length tree\n\n      initWorkArea(288);\n      hn[0] = 0;\n      result = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n\n      if (result != Z_OK || bl[0] === 0) {\n        if (result == Z_DATA_ERROR) {\n          z.msg = \"oversubscribed literal/length tree\";\n        } else if (result != Z_MEM_ERROR) {\n          z.msg = \"incomplete literal/length tree\";\n          result = Z_DATA_ERROR;\n        }\n\n        return result;\n      } // build distance tree\n\n\n      initWorkArea(288);\n      result = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n\n      if (result != Z_OK || bd[0] === 0 && nl > 257) {\n        if (result == Z_DATA_ERROR) {\n          z.msg = \"oversubscribed distance tree\";\n        } else if (result == Z_BUF_ERROR) {\n          z.msg = \"incomplete distance tree\";\n          result = Z_DATA_ERROR;\n        } else if (result != Z_MEM_ERROR) {\n          z.msg = \"empty distance tree with lengths\";\n          result = Z_DATA_ERROR;\n        }\n\n        return result;\n      }\n\n      return Z_OK;\n    };\n  }\n\n  InfTree.inflate_trees_fixed = function (bl, // literal desired/actual bit depth\n  bd, // distance desired/actual bit depth\n  tl, // literal/length tree result\n  td // distance tree result\n  ) {\n    bl[0] = fixed_bl;\n    bd[0] = fixed_bd;\n    tl[0] = fixed_tl;\n    td[0] = fixed_td;\n    return Z_OK;\n  }; // InfCodes\n  // waiting for \"i:\"=input,\n  // \"o:\"=output,\n  // \"x:\"=nothing\n\n\n  var START = 0; // x: set up for LEN\n\n  var LEN = 1; // i: get length/literal/eob next\n\n  var LENEXT = 2; // i: getting length extra (have base)\n\n  var DIST = 3; // i: get distance next\n\n  var DISTEXT = 4; // i: getting distance extra\n\n  var COPY = 5; // o: copying bytes in window, waiting\n  // for space\n\n  var LIT = 6; // o: got literal, waiting for output\n  // space\n\n  var WASH = 7; // o: got eob, possibly still output\n  // waiting\n\n  var END = 8; // x: got eob and all data flushed\n\n  var BADCODE = 9; // x: got error\n\n  function InfCodes() {\n    var that = this;\n    var mode; // current inflate_codes mode\n    // mode dependent information\n\n    var len = 0;\n    var tree; // pointer into tree\n\n    var tree_index = 0;\n    var need = 0; // bits needed\n\n    var lit = 0; // if EXT or COPY, where and how much\n\n    var get = 0; // bits to get for extra\n\n    var dist = 0; // distance back to copy from\n\n    var lbits = 0; // ltree bits decoded per branch\n\n    var dbits = 0; // dtree bits decoder per branch\n\n    var ltree; // literal/length/eob tree\n\n    var ltree_index = 0; // literal/length/eob tree\n\n    var dtree; // distance tree\n\n    var dtree_index = 0; // distance tree\n    // Called with number of bytes left to write in window at least 258\n    // (the maximum string length) and number of input bytes available\n    // at least ten. The ten bytes are six bytes for the longest length/\n    // distance pair plus four bytes for overloading the bit buffer.\n\n    function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n      var t; // temporary pointer\n\n      var tp; // temporary pointer\n\n      var tp_index; // temporary pointer\n\n      var e; // extra bits or operation\n\n      var b; // bit buffer\n\n      var k; // bits in bit buffer\n\n      var p; // input data pointer\n\n      var n; // bytes available there\n\n      var q; // output window write pointer\n\n      var m; // bytes to end of window or read pointer\n\n      var ml; // mask for literal/length tree\n\n      var md; // mask for distance tree\n\n      var c; // bytes to copy\n\n      var d; // distance back to copy from\n\n      var r; // copy source pointer\n\n      var tp_index_t_3; // (tp_index+t)*3\n      // load input, output, bit values\n\n      p = z.next_in_index;\n      n = z.avail_in;\n      b = s.bitb;\n      k = s.bitk;\n      q = s.write;\n      m = q < s.read ? s.read - q - 1 : s.end - q; // initialize masks\n\n      ml = inflate_mask[bl];\n      md = inflate_mask[bd]; // do until not enough input or output space for fast loop\n\n      do {\n        // assume called with m >= 258 && n >= 10\n        // get literal/length code\n        while (k < 20) {\n          // max bits for literal/length code\n          n--;\n          b |= (z.read_byte(p++) & 0xff) << k;\n          k += 8;\n        }\n\n        t = b & ml;\n        tp = tl;\n        tp_index = tl_index;\n        tp_index_t_3 = (tp_index + t) * 3;\n\n        if ((e = tp[tp_index_t_3]) === 0) {\n          b >>= tp[tp_index_t_3 + 1];\n          k -= tp[tp_index_t_3 + 1];\n          s.window[q++] =\n          /* (byte) */\n          tp[tp_index_t_3 + 2];\n          m--;\n          continue;\n        }\n\n        do {\n          b >>= tp[tp_index_t_3 + 1];\n          k -= tp[tp_index_t_3 + 1];\n\n          if ((e & 16) !== 0) {\n            e &= 15;\n            c = tp[tp_index_t_3 + 2] + (\n            /* (int) */\n            b & inflate_mask[e]);\n            b >>= e;\n            k -= e; // decode distance base of block to copy\n\n            while (k < 15) {\n              // max bits for distance code\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            t = b & md;\n            tp = td;\n            tp_index = td_index;\n            tp_index_t_3 = (tp_index + t) * 3;\n            e = tp[tp_index_t_3];\n\n            do {\n              b >>= tp[tp_index_t_3 + 1];\n              k -= tp[tp_index_t_3 + 1];\n\n              if ((e & 16) !== 0) {\n                // get extra bits to add to distance base\n                e &= 15;\n\n                while (k < e) {\n                  // get extra bits (up to 13)\n                  n--;\n                  b |= (z.read_byte(p++) & 0xff) << k;\n                  k += 8;\n                }\n\n                d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n                b >>= e;\n                k -= e; // do the copy\n\n                m -= c;\n\n                if (q >= d) {\n                  // offset before dest\n                  // just copy\n                  r = q - d;\n\n                  if (q - r > 0 && 2 > q - r) {\n                    s.window[q++] = s.window[r++]; // minimum\n                    // count is\n                    // three,\n\n                    s.window[q++] = s.window[r++]; // so unroll\n                    // loop a\n                    // little\n\n                    c -= 2;\n                  } else {\n                    s.window.set(s.window.subarray(r, r + 2), q);\n                    q += 2;\n                    r += 2;\n                    c -= 2;\n                  }\n                } else {\n                  // else offset after destination\n                  r = q - d;\n\n                  do {\n                    r += s.end; // force pointer in window\n                  } while (r < 0); // covers invalid distances\n\n\n                  e = s.end - r;\n\n                  if (c > e) {\n                    // if source crosses,\n                    c -= e; // wrapped copy\n\n                    if (q - r > 0 && e > q - r) {\n                      do {\n                        s.window[q++] = s.window[r++];\n                      } while (--e !== 0);\n                    } else {\n                      s.window.set(s.window.subarray(r, r + e), q);\n                      q += e;\n                      r += e;\n                      e = 0;\n                    }\n\n                    r = 0; // copy rest from start of window\n                  }\n                } // copy all or what's left\n\n\n                if (q - r > 0 && c > q - r) {\n                  do {\n                    s.window[q++] = s.window[r++];\n                  } while (--c !== 0);\n                } else {\n                  s.window.set(s.window.subarray(r, r + c), q);\n                  q += c;\n                  r += c;\n                  c = 0;\n                }\n\n                break;\n              } else if ((e & 64) === 0) {\n                t += tp[tp_index_t_3 + 2];\n                t += b & inflate_mask[e];\n                tp_index_t_3 = (tp_index + t) * 3;\n                e = tp[tp_index_t_3];\n              } else {\n                z.msg = \"invalid distance code\";\n                c = z.avail_in - n;\n                c = k >> 3 < c ? k >> 3 : c;\n                n += c;\n                p -= c;\n                k -= c << 3;\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return Z_DATA_ERROR;\n              }\n            } while (true);\n\n            break;\n          }\n\n          if ((e & 64) === 0) {\n            t += tp[tp_index_t_3 + 2];\n            t += b & inflate_mask[e];\n            tp_index_t_3 = (tp_index + t) * 3;\n\n            if ((e = tp[tp_index_t_3]) === 0) {\n              b >>= tp[tp_index_t_3 + 1];\n              k -= tp[tp_index_t_3 + 1];\n              s.window[q++] =\n              /* (byte) */\n              tp[tp_index_t_3 + 2];\n              m--;\n              break;\n            }\n          } else if ((e & 32) !== 0) {\n            c = z.avail_in - n;\n            c = k >> 3 < c ? k >> 3 : c;\n            n += c;\n            p -= c;\n            k -= c << 3;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return Z_STREAM_END;\n          } else {\n            z.msg = \"invalid literal/length code\";\n            c = z.avail_in - n;\n            c = k >> 3 < c ? k >> 3 : c;\n            n += c;\n            p -= c;\n            k -= c << 3;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return Z_DATA_ERROR;\n          }\n        } while (true);\n      } while (m >= 258 && n >= 10); // not enough input or output--restore pointers and return\n\n\n      c = z.avail_in - n;\n      c = k >> 3 < c ? k >> 3 : c;\n      n += c;\n      p -= c;\n      k -= c << 3;\n      s.bitb = b;\n      s.bitk = k;\n      z.avail_in = n;\n      z.total_in += p - z.next_in_index;\n      z.next_in_index = p;\n      s.write = q;\n      return Z_OK;\n    }\n\n    that.init = function (bl, bd, tl, tl_index, td, td_index) {\n      mode = START;\n      lbits =\n      /* (byte) */\n      bl;\n      dbits =\n      /* (byte) */\n      bd;\n      ltree = tl;\n      ltree_index = tl_index;\n      dtree = td;\n      dtree_index = td_index;\n      tree = null;\n    };\n\n    that.proc = function (s, z, r) {\n      var j; // temporary storage\n\n      var tindex; // temporary pointer\n\n      var e; // extra bits or operation\n\n      var b = 0; // bit buffer\n\n      var k = 0; // bits in bit buffer\n\n      var p = 0; // input data pointer\n\n      var n; // bytes available there\n\n      var q; // output window write pointer\n\n      var m; // bytes to end of window or read pointer\n\n      var f; // pointer to copy strings from\n      // copy input/output information to locals (UPDATE macro restores)\n\n      p = z.next_in_index;\n      n = z.avail_in;\n      b = s.bitb;\n      k = s.bitk;\n      q = s.write;\n      m = q < s.read ? s.read - q - 1 : s.end - q; // process input and output based on current state\n\n      while (true) {\n        switch (mode) {\n          // waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n          case START:\n            // x: set up for LEN\n            if (m >= 258 && n >= 10) {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              r = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n              p = z.next_in_index;\n              n = z.avail_in;\n              b = s.bitb;\n              k = s.bitk;\n              q = s.write;\n              m = q < s.read ? s.read - q - 1 : s.end - q;\n\n              if (r != Z_OK) {\n                mode = r == Z_STREAM_END ? WASH : BADCODE;\n                break;\n              }\n            }\n\n            need = lbits;\n            tree = ltree;\n            tree_index = ltree_index;\n            mode = LEN;\n\n          /* falls through */\n\n          case LEN:\n            // i: get length/literal/eob next\n            j = need;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            tindex = (tree_index + (b & inflate_mask[j])) * 3;\n            b >>>= tree[tindex + 1];\n            k -= tree[tindex + 1];\n            e = tree[tindex];\n\n            if (e === 0) {\n              // literal\n              lit = tree[tindex + 2];\n              mode = LIT;\n              break;\n            }\n\n            if ((e & 16) !== 0) {\n              // length\n              get = e & 15;\n              len = tree[tindex + 2];\n              mode = LENEXT;\n              break;\n            }\n\n            if ((e & 64) === 0) {\n              // next table\n              need = e;\n              tree_index = tindex / 3 + tree[tindex + 2];\n              break;\n            }\n\n            if ((e & 32) !== 0) {\n              // end of block\n              mode = WASH;\n              break;\n            }\n\n            mode = BADCODE; // invalid code\n\n            z.msg = \"invalid literal/length code\";\n            r = Z_DATA_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          case LENEXT:\n            // i: getting length extra (have base)\n            j = get;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            len += b & inflate_mask[j];\n            b >>= j;\n            k -= j;\n            need = dbits;\n            tree = dtree;\n            tree_index = dtree_index;\n            mode = DIST;\n\n          /* falls through */\n\n          case DIST:\n            // i: get distance next\n            j = need;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            tindex = (tree_index + (b & inflate_mask[j])) * 3;\n            b >>= tree[tindex + 1];\n            k -= tree[tindex + 1];\n            e = tree[tindex];\n\n            if ((e & 16) !== 0) {\n              // distance\n              get = e & 15;\n              dist = tree[tindex + 2];\n              mode = DISTEXT;\n              break;\n            }\n\n            if ((e & 64) === 0) {\n              // next table\n              need = e;\n              tree_index = tindex / 3 + tree[tindex + 2];\n              break;\n            }\n\n            mode = BADCODE; // invalid code\n\n            z.msg = \"invalid distance code\";\n            r = Z_DATA_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          case DISTEXT:\n            // i: getting distance extra\n            j = get;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            dist += b & inflate_mask[j];\n            b >>= j;\n            k -= j;\n            mode = COPY;\n\n          /* falls through */\n\n          case COPY:\n            // o: copying bytes in window, waiting for space\n            f = q - dist;\n\n            while (f < 0) {\n              // modulo window size-\"while\" instead\n              f += s.end; // of \"if\" handles invalid distances\n            }\n\n            while (len !== 0) {\n              if (m === 0) {\n                if (q == s.end && s.read !== 0) {\n                  q = 0;\n                  m = q < s.read ? s.read - q - 1 : s.end - q;\n                }\n\n                if (m === 0) {\n                  s.write = q;\n                  r = s.inflate_flush(z, r);\n                  q = s.write;\n                  m = q < s.read ? s.read - q - 1 : s.end - q;\n\n                  if (q == s.end && s.read !== 0) {\n                    q = 0;\n                    m = q < s.read ? s.read - q - 1 : s.end - q;\n                  }\n\n                  if (m === 0) {\n                    s.bitb = b;\n                    s.bitk = k;\n                    z.avail_in = n;\n                    z.total_in += p - z.next_in_index;\n                    z.next_in_index = p;\n                    s.write = q;\n                    return s.inflate_flush(z, r);\n                  }\n                }\n              }\n\n              s.window[q++] = s.window[f++];\n              m--;\n              if (f == s.end) f = 0;\n              len--;\n            }\n\n            mode = START;\n            break;\n\n          case LIT:\n            // o: got literal, waiting for output space\n            if (m === 0) {\n              if (q == s.end && s.read !== 0) {\n                q = 0;\n                m = q < s.read ? s.read - q - 1 : s.end - q;\n              }\n\n              if (m === 0) {\n                s.write = q;\n                r = s.inflate_flush(z, r);\n                q = s.write;\n                m = q < s.read ? s.read - q - 1 : s.end - q;\n\n                if (q == s.end && s.read !== 0) {\n                  q = 0;\n                  m = q < s.read ? s.read - q - 1 : s.end - q;\n                }\n\n                if (m === 0) {\n                  s.bitb = b;\n                  s.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  s.write = q;\n                  return s.inflate_flush(z, r);\n                }\n              }\n            }\n\n            r = Z_OK;\n            s.window[q++] =\n            /* (byte) */\n            lit;\n            m--;\n            mode = START;\n            break;\n\n          case WASH:\n            // o: got eob, possibly more output\n            if (k > 7) {\n              // return unused byte, if any\n              k -= 8;\n              n++;\n              p--; // can always return one\n            }\n\n            s.write = q;\n            r = s.inflate_flush(z, r);\n            q = s.write;\n            m = q < s.read ? s.read - q - 1 : s.end - q;\n\n            if (s.read != s.write) {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              return s.inflate_flush(z, r);\n            }\n\n            mode = END;\n\n          /* falls through */\n\n          case END:\n            r = Z_STREAM_END;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          case BADCODE:\n            // x: got error\n            r = Z_DATA_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          default:\n            r = Z_STREAM_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n        }\n      }\n    };\n\n    that.free = function () {// ZFREE(z, c);\n    };\n  } // InfBlocks\n  // Table for deflate from PKZIP's appnote.txt.\n\n\n  var border = [// Order of the bit length code lengths\n  16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n  var TYPE = 0; // get type bits (3, including end bit)\n\n  var LENS = 1; // get lengths for stored\n\n  var STORED = 2; // processing stored block\n\n  var TABLE = 3; // get table lengths\n\n  var BTREE = 4; // get bit lengths tree for a dynamic\n  // block\n\n  var DTREE = 5; // get length, distance trees for a\n  // dynamic block\n\n  var CODES = 6; // processing fixed or dynamic block\n\n  var DRY = 7; // output remaining window bytes\n\n  var DONELOCKS = 8; // finished last block, done\n\n  var BADBLOCKS = 9; // ot a data error--stuck here\n\n  function InfBlocks(z, w) {\n    var that = this;\n    var mode = TYPE; // current inflate_block mode\n\n    var left = 0; // if STORED, bytes left to copy\n\n    var table = 0; // table lengths (14 bits)\n\n    var index = 0; // index into blens (or border)\n\n    var blens; // bit lengths of codes\n\n    var bb = [0]; // bit length tree depth\n\n    var tb = [0]; // bit length decoding tree\n\n    var codes = new InfCodes(); // if CODES, current state\n\n    var last = 0; // true if this block is the last block\n\n    var hufts = new Int32Array(MANY * 3); // single malloc for tree space\n\n    var check = 0; // check on output\n\n    var inftree = new InfTree();\n    that.bitk = 0; // bits in bit buffer\n\n    that.bitb = 0; // bit buffer\n\n    that.window = new Uint8Array(w); // sliding window\n\n    that.end = w; // one byte after sliding window\n\n    that.read = 0; // window read pointer\n\n    that.write = 0; // window write pointer\n\n    that.reset = function (z, c) {\n      if (c) c[0] = check; // if (mode == BTREE || mode == DTREE) {\n      // }\n\n      if (mode == CODES) {\n        codes.free(z);\n      }\n\n      mode = TYPE;\n      that.bitk = 0;\n      that.bitb = 0;\n      that.read = that.write = 0;\n    };\n\n    that.reset(z, null); // copy as much as possible from the sliding window to the output area\n\n    that.inflate_flush = function (z, r) {\n      var n;\n      var p;\n      var q; // local copies of source and destination pointers\n\n      p = z.next_out_index;\n      q = that.read; // compute number of bytes to copy as far as end of window\n\n      n =\n      /* (int) */\n      (q <= that.write ? that.write : that.end) - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n !== 0 && r == Z_BUF_ERROR) r = Z_OK; // update counters\n\n      z.avail_out -= n;\n      z.total_out += n; // copy as far as end of window\n\n      z.next_out.set(that.window.subarray(q, q + n), p);\n      p += n;\n      q += n; // see if more to copy at beginning of window\n\n      if (q == that.end) {\n        // wrap pointers\n        q = 0;\n        if (that.write == that.end) that.write = 0; // compute bytes to copy\n\n        n = that.write - q;\n        if (n > z.avail_out) n = z.avail_out;\n        if (n !== 0 && r == Z_BUF_ERROR) r = Z_OK; // update counters\n\n        z.avail_out -= n;\n        z.total_out += n; // copy\n\n        z.next_out.set(that.window.subarray(q, q + n), p);\n        p += n;\n        q += n;\n      } // update pointers\n\n\n      z.next_out_index = p;\n      that.read = q; // done\n\n      return r;\n    };\n\n    that.proc = function (z, r) {\n      var t; // temporary storage\n\n      var b; // bit buffer\n\n      var k; // bits in bit buffer\n\n      var p; // input data pointer\n\n      var n; // bytes available there\n\n      var q; // output window write pointer\n\n      var m; // bytes to end of window or read pointer\n\n      var i; // copy input/output information to locals (UPDATE macro restores)\n      // {\n\n      p = z.next_in_index;\n      n = z.avail_in;\n      b = that.bitb;\n      k = that.bitk; // }\n      // {\n\n      q = that.write;\n      m =\n      /* (int) */\n      q < that.read ? that.read - q - 1 : that.end - q; // }\n      // process input based on current state\n      // DEBUG dtree\n\n      while (true) {\n        switch (mode) {\n          case TYPE:\n            while (k < 3) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            t =\n            /* (int) */\n            b & 7;\n            last = t & 1;\n\n            switch (t >>> 1) {\n              case 0:\n                // stored\n                // {\n                b >>>= 3;\n                k -= 3; // }\n\n                t = k & 7; // go to byte boundary\n                // {\n\n                b >>>= t;\n                k -= t; // }\n\n                mode = LENS; // get length of stored block\n\n                break;\n\n              case 1:\n                // fixed\n                // {\n                var bl = []; // new Array(1);\n\n                var bd = []; // new Array(1);\n\n                var tl = [[]]; // new Array(1);\n\n                var td = [[]]; // new Array(1);\n\n                InfTree.inflate_trees_fixed(bl, bd, tl, td);\n                codes.init(bl[0], bd[0], tl[0], 0, td[0], 0); // }\n                // {\n\n                b >>>= 3;\n                k -= 3; // }\n\n                mode = CODES;\n                break;\n\n              case 2:\n                // dynamic\n                // {\n                b >>>= 3;\n                k -= 3; // }\n\n                mode = TABLE;\n                break;\n\n              case 3:\n                // illegal\n                // {\n                b >>>= 3;\n                k -= 3; // }\n\n                mode = BADBLOCKS;\n                z.msg = \"invalid block type\";\n                r = Z_DATA_ERROR;\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n            }\n\n            break;\n\n          case LENS:\n            while (k < 32) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            if ((~b >>> 16 & 0xffff) != (b & 0xffff)) {\n              mode = BADBLOCKS;\n              z.msg = \"invalid stored block lengths\";\n              r = Z_DATA_ERROR;\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            left = b & 0xffff;\n            b = k = 0; // dump bits\n\n            mode = left !== 0 ? STORED : last !== 0 ? DRY : TYPE;\n            break;\n\n          case STORED:\n            if (n === 0) {\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            if (m === 0) {\n              if (q == that.end && that.read !== 0) {\n                q = 0;\n                m =\n                /* (int) */\n                q < that.read ? that.read - q - 1 : that.end - q;\n              }\n\n              if (m === 0) {\n                that.write = q;\n                r = that.inflate_flush(z, r);\n                q = that.write;\n                m =\n                /* (int) */\n                q < that.read ? that.read - q - 1 : that.end - q;\n\n                if (q == that.end && that.read !== 0) {\n                  q = 0;\n                  m =\n                  /* (int) */\n                  q < that.read ? that.read - q - 1 : that.end - q;\n                }\n\n                if (m === 0) {\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n              }\n            }\n\n            r = Z_OK;\n            t = left;\n            if (t > n) t = n;\n            if (t > m) t = m;\n            that.window.set(z.read_buf(p, t), q);\n            p += t;\n            n -= t;\n            q += t;\n            m -= t;\n            if ((left -= t) !== 0) break;\n            mode = last !== 0 ? DRY : TYPE;\n            break;\n\n          case TABLE:\n            while (k < 14) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            table = t = b & 0x3fff;\n\n            if ((t & 0x1f) > 29 || (t >> 5 & 0x1f) > 29) {\n              mode = BADBLOCKS;\n              z.msg = \"too many length or distance symbols\";\n              r = Z_DATA_ERROR;\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            t = 258 + (t & 0x1f) + (t >> 5 & 0x1f);\n\n            if (!blens || blens.length < t) {\n              blens = []; // new Array(t);\n            } else {\n              for (i = 0; i < t; i++) {\n                blens[i] = 0;\n              }\n            } // {\n\n\n            b >>>= 14;\n            k -= 14; // }\n\n            index = 0;\n            mode = BTREE;\n\n          /* falls through */\n\n          case BTREE:\n            while (index < 4 + (table >>> 10)) {\n              while (k < 3) {\n                if (n !== 0) {\n                  r = Z_OK;\n                } else {\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n\n                n--;\n                b |= (z.read_byte(p++) & 0xff) << k;\n                k += 8;\n              }\n\n              blens[border[index++]] = b & 7; // {\n\n              b >>>= 3;\n              k -= 3; // }\n            }\n\n            while (index < 19) {\n              blens[border[index++]] = 0;\n            }\n\n            bb[0] = 7;\n            t = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n\n            if (t != Z_OK) {\n              r = t;\n\n              if (r == Z_DATA_ERROR) {\n                blens = null;\n                mode = BADBLOCKS;\n              }\n\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            index = 0;\n            mode = DTREE;\n\n          /* falls through */\n\n          case DTREE:\n            while (true) {\n              t = table;\n\n              if (index >= 258 + (t & 0x1f) + (t >> 5 & 0x1f)) {\n                break;\n              }\n\n              var j, c;\n              t = bb[0];\n\n              while (k < t) {\n                if (n !== 0) {\n                  r = Z_OK;\n                } else {\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n\n                n--;\n                b |= (z.read_byte(p++) & 0xff) << k;\n                k += 8;\n              } // if (tb[0] == -1) {\n              // System.err.println(\"null...\");\n              // }\n\n\n              t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n              c = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n              if (c < 16) {\n                b >>>= t;\n                k -= t;\n                blens[index++] = c;\n              } else {\n                // c == 16..18\n                i = c == 18 ? 7 : c - 14;\n                j = c == 18 ? 11 : 3;\n\n                while (k < t + i) {\n                  if (n !== 0) {\n                    r = Z_OK;\n                  } else {\n                    that.bitb = b;\n                    that.bitk = k;\n                    z.avail_in = n;\n                    z.total_in += p - z.next_in_index;\n                    z.next_in_index = p;\n                    that.write = q;\n                    return that.inflate_flush(z, r);\n                  }\n\n                  n--;\n                  b |= (z.read_byte(p++) & 0xff) << k;\n                  k += 8;\n                }\n\n                b >>>= t;\n                k -= t;\n                j += b & inflate_mask[i];\n                b >>>= i;\n                k -= i;\n                i = index;\n                t = table;\n\n                if (i + j > 258 + (t & 0x1f) + (t >> 5 & 0x1f) || c == 16 && i < 1) {\n                  blens = null;\n                  mode = BADBLOCKS;\n                  z.msg = \"invalid bit length repeat\";\n                  r = Z_DATA_ERROR;\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n\n                c = c == 16 ? blens[i - 1] : 0;\n\n                do {\n                  blens[i++] = c;\n                } while (--j !== 0);\n\n                index = i;\n              }\n            }\n\n            tb[0] = -1; // {\n\n            var bl_ = []; // new Array(1);\n\n            var bd_ = []; // new Array(1);\n\n            var tl_ = []; // new Array(1);\n\n            var td_ = []; // new Array(1);\n\n            bl_[0] = 9; // must be <= 9 for lookahead assumptions\n\n            bd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n            t = table;\n            t = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + (t >> 5 & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n\n            if (t != Z_OK) {\n              if (t == Z_DATA_ERROR) {\n                blens = null;\n                mode = BADBLOCKS;\n              }\n\n              r = t;\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]); // }\n\n            mode = CODES;\n\n          /* falls through */\n\n          case CODES:\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n\n            if ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n              return that.inflate_flush(z, r);\n            }\n\n            r = Z_OK;\n            codes.free(z);\n            p = z.next_in_index;\n            n = z.avail_in;\n            b = that.bitb;\n            k = that.bitk;\n            q = that.write;\n            m =\n            /* (int) */\n            q < that.read ? that.read - q - 1 : that.end - q;\n\n            if (last === 0) {\n              mode = TYPE;\n              break;\n            }\n\n            mode = DRY;\n\n          /* falls through */\n\n          case DRY:\n            that.write = q;\n            r = that.inflate_flush(z, r);\n            q = that.write;\n            m =\n            /* (int) */\n            q < that.read ? that.read - q - 1 : that.end - q;\n\n            if (that.read != that.write) {\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            mode = DONELOCKS;\n\n          /* falls through */\n\n          case DONELOCKS:\n            r = Z_STREAM_END;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n\n          case BADBLOCKS:\n            r = Z_DATA_ERROR;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n\n          default:\n            r = Z_STREAM_ERROR;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n        }\n      }\n    };\n\n    that.free = function (z) {\n      that.reset(z, null);\n      that.window = null;\n      hufts = null; // ZFREE(z, s);\n    };\n\n    that.set_dictionary = function (d, start, n) {\n      that.window.set(d.subarray(start, start + n), 0);\n      that.read = that.write = n;\n    }; // Returns true if inflate is currently at the end of a block generated\n    // by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n\n\n    that.sync_point = function () {\n      return mode == LENS ? 1 : 0;\n    };\n  } // Inflate\n  // preset dictionary flag in zlib header\n\n\n  var PRESET_DICT = 0x20;\n  var Z_DEFLATED = 8;\n  var METHOD = 0; // waiting for method byte\n\n  var FLAG = 1; // waiting for flag byte\n\n  var DICT4 = 2; // four dictionary check bytes to go\n\n  var DICT3 = 3; // three dictionary check bytes to go\n\n  var DICT2 = 4; // two dictionary check bytes to go\n\n  var DICT1 = 5; // one dictionary check byte to go\n\n  var DICT0 = 6; // waiting for inflateSetDictionary\n\n  var BLOCKS = 7; // decompressing blocks\n\n  var DONE = 12; // finished check, done\n\n  var BAD = 13; // got an error--stay here\n\n  var mark = [0, 0, 0xff, 0xff];\n\n  function Inflate() {\n    var that = this;\n    that.mode = 0; // current inflate mode\n    // mode dependent information\n\n    that.method = 0; // if FLAGS, method byte\n    // if CHECK, check values to compare\n\n    that.was = [0]; // new Array(1); // computed check value\n\n    that.need = 0; // stream check value\n    // if BAD, inflateSync's marker bytes count\n\n    that.marker = 0; // mode independent information\n\n    that.wbits = 0; // log2(window size) (8..15, defaults to 15)\n    // this.blocks; // current inflate_blocks state\n\n    function inflateReset(z) {\n      if (!z || !z.istate) return Z_STREAM_ERROR;\n      z.total_in = z.total_out = 0;\n      z.msg = null;\n      z.istate.mode = BLOCKS;\n      z.istate.blocks.reset(z, null);\n      return Z_OK;\n    }\n\n    that.inflateEnd = function (z) {\n      if (that.blocks) that.blocks.free(z);\n      that.blocks = null; // ZFREE(z, z->state);\n\n      return Z_OK;\n    };\n\n    that.inflateInit = function (z, w) {\n      z.msg = null;\n      that.blocks = null; // set window size\n\n      if (w < 8 || w > 15) {\n        that.inflateEnd(z);\n        return Z_STREAM_ERROR;\n      }\n\n      that.wbits = w;\n      z.istate.blocks = new InfBlocks(z, 1 << w); // reset state\n\n      inflateReset(z);\n      return Z_OK;\n    };\n\n    that.inflate = function (z, f) {\n      var r;\n      var b;\n      if (!z || !z.istate || !z.next_in) return Z_STREAM_ERROR;\n      f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n      r = Z_BUF_ERROR;\n\n      while (true) {\n        // System.out.println(\"mode: \"+z.istate.mode);\n        switch (z.istate.mode) {\n          case METHOD:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n\n            if (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n              z.istate.mode = BAD;\n              z.msg = \"unknown compression method\";\n              z.istate.marker = 5; // can't try inflateSync\n\n              break;\n            }\n\n            if ((z.istate.method >> 4) + 8 > z.istate.wbits) {\n              z.istate.mode = BAD;\n              z.msg = \"invalid window size\";\n              z.istate.marker = 5; // can't try inflateSync\n\n              break;\n            }\n\n            z.istate.mode = FLAG;\n\n          /* falls through */\n\n          case FLAG:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            b = z.read_byte(z.next_in_index++) & 0xff;\n\n            if (((z.istate.method << 8) + b) % 31 !== 0) {\n              z.istate.mode = BAD;\n              z.msg = \"incorrect header check\";\n              z.istate.marker = 5; // can't try inflateSync\n\n              break;\n            }\n\n            if ((b & PRESET_DICT) === 0) {\n              z.istate.mode = BLOCKS;\n              break;\n            }\n\n            z.istate.mode = DICT4;\n\n          /* falls through */\n\n          case DICT4:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need = (z.read_byte(z.next_in_index++) & 0xff) << 24 & 0xff000000;\n            z.istate.mode = DICT3;\n\n          /* falls through */\n\n          case DICT3:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 16 & 0xff0000;\n            z.istate.mode = DICT2;\n\n          /* falls through */\n\n          case DICT2:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 8 & 0xff00;\n            z.istate.mode = DICT1;\n\n          /* falls through */\n\n          case DICT1:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need += z.read_byte(z.next_in_index++) & 0xff;\n            z.istate.mode = DICT0;\n            return Z_NEED_DICT;\n\n          case DICT0:\n            z.istate.mode = BAD;\n            z.msg = \"need dictionary\";\n            z.istate.marker = 0; // can try inflateSync\n\n            return Z_STREAM_ERROR;\n\n          case BLOCKS:\n            r = z.istate.blocks.proc(z, r);\n\n            if (r == Z_DATA_ERROR) {\n              z.istate.mode = BAD;\n              z.istate.marker = 0; // can try inflateSync\n\n              break;\n            }\n\n            if (r == Z_OK) {\n              r = f;\n            }\n\n            if (r != Z_STREAM_END) {\n              return r;\n            }\n\n            r = f;\n            z.istate.blocks.reset(z, z.istate.was);\n            z.istate.mode = DONE;\n\n          /* falls through */\n\n          case DONE:\n            return Z_STREAM_END;\n\n          case BAD:\n            return Z_DATA_ERROR;\n\n          default:\n            return Z_STREAM_ERROR;\n        }\n      }\n    };\n\n    that.inflateSetDictionary = function (z, dictionary, dictLength) {\n      var index = 0;\n      var length = dictLength;\n      if (!z || !z.istate || z.istate.mode != DICT0) return Z_STREAM_ERROR;\n\n      if (length >= 1 << z.istate.wbits) {\n        length = (1 << z.istate.wbits) - 1;\n        index = dictLength - length;\n      }\n\n      z.istate.blocks.set_dictionary(dictionary, index, length);\n      z.istate.mode = BLOCKS;\n      return Z_OK;\n    };\n\n    that.inflateSync = function (z) {\n      var n; // number of bytes to look at\n\n      var p; // pointer to bytes\n\n      var m; // number of marker bytes found in a row\n\n      var r, w; // temporaries to save total_in and total_out\n      // set up\n\n      if (!z || !z.istate) return Z_STREAM_ERROR;\n\n      if (z.istate.mode != BAD) {\n        z.istate.mode = BAD;\n        z.istate.marker = 0;\n      }\n\n      if ((n = z.avail_in) === 0) return Z_BUF_ERROR;\n      p = z.next_in_index;\n      m = z.istate.marker; // search\n\n      while (n !== 0 && m < 4) {\n        if (z.read_byte(p) == mark[m]) {\n          m++;\n        } else if (z.read_byte(p) !== 0) {\n          m = 0;\n        } else {\n          m = 4 - m;\n        }\n\n        p++;\n        n--;\n      } // restore\n\n\n      z.total_in += p - z.next_in_index;\n      z.next_in_index = p;\n      z.avail_in = n;\n      z.istate.marker = m; // return no joy or set up to restart on a new block\n\n      if (m != 4) {\n        return Z_DATA_ERROR;\n      }\n\n      r = z.total_in;\n      w = z.total_out;\n      inflateReset(z);\n      z.total_in = r;\n      z.total_out = w;\n      z.istate.mode = BLOCKS;\n      return Z_OK;\n    }; // Returns true if inflate is currently at the end of a block generated\n    // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n    // implementation to provide an additional safety check. PPP uses\n    // Z_SYNC_FLUSH\n    // but removes the length bytes of the resulting empty stored block. When\n    // decompressing, PPP checks that at the end of input packet, inflate is\n    // waiting for these length bytes.\n\n\n    that.inflateSyncPoint = function (z) {\n      if (!z || !z.istate || !z.istate.blocks) return Z_STREAM_ERROR;\n      return z.istate.blocks.sync_point();\n    };\n  } // ZStream\n\n\n  function ZStream() {}\n\n  ZStream.prototype = {\n    inflateInit: function inflateInit(bits) {\n      var that = this;\n      that.istate = new Inflate();\n      if (!bits) bits = MAX_BITS;\n      return that.istate.inflateInit(that, bits);\n    },\n    inflate: function inflate(f) {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      return that.istate.inflate(that, f);\n    },\n    inflateEnd: function inflateEnd() {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      var ret = that.istate.inflateEnd(that);\n      that.istate = null;\n      return ret;\n    },\n    inflateSync: function inflateSync() {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      return that.istate.inflateSync(that);\n    },\n    inflateSetDictionary: function inflateSetDictionary(dictionary, dictLength) {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      return that.istate.inflateSetDictionary(that, dictionary, dictLength);\n    },\n    read_byte: function read_byte(start) {\n      var that = this;\n      return that.next_in.subarray(start, start + 1)[0];\n    },\n    read_buf: function read_buf(start, size) {\n      var that = this;\n      return that.next_in.subarray(start, start + size);\n    }\n  }; // Inflater\n\n  function Inflater() {\n    var that = this;\n    var z = new ZStream();\n    var bufsize = 512;\n    var flush = Z_NO_FLUSH;\n    var buf = new Uint8Array(bufsize);\n    var nomoreinput = false;\n    z.inflateInit();\n    z.next_out = buf;\n\n    that.append = function (data, onprogress) {\n      var err,\n          buffers = [],\n          lastIndex = 0,\n          bufferIndex = 0,\n          bufferSize = 0,\n          array;\n      if (data.length === 0) return;\n      z.next_in_index = 0;\n      z.next_in = data;\n      z.avail_in = data.length;\n\n      do {\n        z.next_out_index = 0;\n        z.avail_out = bufsize;\n\n        if (z.avail_in === 0 && !nomoreinput) {\n          // if buffer is empty and more input is available, refill it\n          z.next_in_index = 0;\n          nomoreinput = true;\n        }\n\n        err = z.inflate(flush);\n\n        if (nomoreinput && err === Z_BUF_ERROR) {\n          if (z.avail_in !== 0) throw new Error(\"inflating: bad input\");\n        } else if (err !== Z_OK && err !== Z_STREAM_END) throw new Error(\"inflating: \" + z.msg);\n\n        if ((nomoreinput || err === Z_STREAM_END) && z.avail_in === data.length) throw new Error(\"inflating: bad input\");\n        if (z.next_out_index) if (z.next_out_index === bufsize) buffers.push(new Uint8Array(buf));else buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n        bufferSize += z.next_out_index;\n\n        if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n          onprogress(z.next_in_index);\n          lastIndex = z.next_in_index;\n        }\n      } while (z.avail_in > 0 || z.avail_out === 0);\n\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n      return array;\n    };\n\n    that.flush = function () {\n      z.inflateEnd();\n    };\n  } // 'zip' may not be defined in z-worker and some tests\n\n\n  var env = global.zip || global;\n  env.Inflater = env._jzlib_Inflater = Inflater;\n})(zipExport);\n\nvar zip = zipExport.zip;\n\n\n//# sourceURL=webpack:///./src/main/js/zip/3rdparty/zip.js?");

/***/ }),

/***/ "./src/main/js/zip/index.js":
/*!**********************************!*\
  !*** ./src/main/js/zip/index.js ***!
  \**********************************/
/*! exports provided: Unzip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _unzip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unzip.js */ \"./src/main/js/zip/unzip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Unzip\", function() { return _unzip_js__WEBPACK_IMPORTED_MODULE_0__[\"Unzip\"]; });\n\n\n\n//# sourceURL=webpack:///./src/main/js/zip/index.js?");

/***/ }),

/***/ "./src/main/js/zip/unzip.js":
/*!**********************************!*\
  !*** ./src/main/js/zip/unzip.js ***!
  \**********************************/
/*! exports provided: Unzip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Unzip\", function() { return Unzip; });\n/* harmony import */ var _3rdparty_zip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./3rdparty/zip.js */ \"./src/main/js/zip/3rdparty/zip.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar Unzip = /*#__PURE__*/function () {\n  function Unzip() {\n    _classCallCheck(this, Unzip);\n  }\n\n  _createClass(Unzip, null, [{\n    key: \"unzip\",\n    value: function unzip(file, exts) {\n      _3rdparty_zip_js__WEBPACK_IMPORTED_MODULE_0__[\"zip\"].useWebWorkers = false;\n      return new Promise(function (success, failure) {\n        var entryProcessor = function entryProcessor(entries) {\n          var romEntry = null;\n\n          if (entries.length == 1) {\n            romEntry = entries[0];\n          } else if (entries.length > 0) {\n            for (var i = 0; i < entries.length; i++) {\n              var entry = entries[i];\n              var filename = entry.filename.toLowerCase();\n\n              for (var _i = 0; _i < exts.length; _i++) {\n                if (filename.endsWith(exts[_i])) {\n                  romEntry = entry;\n                }\n              }\n            }\n          }\n\n          if (romEntry) {\n            var writer = new _3rdparty_zip_js__WEBPACK_IMPORTED_MODULE_0__[\"zip\"].BlobWriter();\n            romEntry.getData(writer, success);\n          } else {\n            failure(\"Unable to find valid ROM in zip file\");\n          }\n        };\n\n        var blobReader = function blobReader(zipReader) {\n          zipReader.getEntries(entryProcessor, failure);\n        };\n\n        _3rdparty_zip_js__WEBPACK_IMPORTED_MODULE_0__[\"zip\"].createReader(new _3rdparty_zip_js__WEBPACK_IMPORTED_MODULE_0__[\"zip\"].BlobReader(file), blobReader, function (failure) {\n          console.log(\"\".concat(failure, \", processing as a non-zip\"));\n          success(file);\n        });\n      });\n    }\n  }]);\n\n  return Unzip;\n}();\n\n//# sourceURL=webpack:///./src/main/js/zip/unzip.js?");

/***/ }),

/***/ "fs":
/*!************************!*\
  !*** external "empty" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = empty;\n\n//# sourceURL=webpack:///external_%22empty%22?");

/***/ })

/******/ });